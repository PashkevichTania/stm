
Lab_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007728  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007918  08007918  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  20000180  08007aa0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dc0  08007aa0  00021dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fb4  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003946  00000000  00000000  0003a164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244e0  00000000  00000000  0003fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017738  00000000  00000000  00064150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca04a  00000000  00000000  0007b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001458d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  00145928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007898 	.word	0x08007898

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007898 	.word	0x08007898

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fbc6 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f81a 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f92e 	bl	800073c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f898 	bl	8000614 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e4:	f000 f8c4 	bl	8000670 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 f8f2 	bl	80006d0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fc5e 	bl	8006dac <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f000 fc28 	bl	8000d48 <HAL_Delay>
	  CDC_Transmit_FS((unsigned char*)str_rx, strlen(str_rx));
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x3c>)
 80004fa:	f7ff fe65 	bl	80001c8 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29b      	uxth	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	4801      	ldr	r0, [pc, #4]	; (800050c <main+0x3c>)
 8000506:	f006 fd1d 	bl	8006f44 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800050a:	e7f1      	b.n	80004f0 <main+0x20>
 800050c:	20000414 	.word	0x20000414

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b098      	sub	sp, #96	; 0x60
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f007 f99e 	bl	8007860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 031c 	add.w	r3, r7, #28
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4b31      	ldr	r3, [pc, #196]	; (800060c <SystemClock_Config+0xfc>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054a:	4a30      	ldr	r2, [pc, #192]	; (800060c <SystemClock_Config+0xfc>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	6413      	str	r3, [r2, #64]	; 0x40
 8000552:	4b2e      	ldr	r3, [pc, #184]	; (800060c <SystemClock_Config+0xfc>)
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <SystemClock_Config+0x100>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a2a      	ldr	r2, [pc, #168]	; (8000610 <SystemClock_Config+0x100>)
 8000568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056c:	6013      	str	r3, [r2, #0]
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0x100>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057a:	2301      	movs	r3, #1
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058e:	2308      	movs	r3, #8
 8000590:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000592:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000596:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800059c:	2307      	movs	r3, #7
 800059e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fe23 	bl	80031f0 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005b0:	f000 f9c2 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	2105      	movs	r1, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f884 	bl	80036e0 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005de:	f000 f9ab 	bl	8000938 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005e2:	2301      	movs	r3, #1
 80005e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005e6:	23c0      	movs	r3, #192	; 0xc0
 80005e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa5c 	bl	8003ab0 <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005fe:	f000 f99b 	bl	8000938 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3760      	adds	r7, #96	; 0x60
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f000 fe65 	bl	8001320 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f96c 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200003c0 	.word	0x200003c0
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <MX_I2S3_Init+0x58>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_I2S3_Init+0x54>)
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <MX_I2S3_Init+0x5c>)
 800069a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2S3_Init+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2S3_Init+0x54>)
 80006b0:	f000 ff7a 	bl	80015a8 <HAL_I2S_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ba:	f000 f93d 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000049c 	.word	0x2000049c
 80006c8:	40003c00 	.word	0x40003c00
 80006cc:	00017700 	.word	0x00017700

080006d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_SPI1_Init+0x64>)
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_SPI1_Init+0x68>)
 80006d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <MX_SPI1_Init+0x64>)
 80006dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000700:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_SPI1_Init+0x64>)
 800071c:	220a      	movs	r2, #10
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_SPI1_Init+0x64>)
 8000722:	f003 fb05 	bl	8003d30 <HAL_SPI_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800072c:	f000 f904 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000444 	.word	0x20000444
 8000738:	40013000 	.word	0x40013000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b71      	ldr	r3, [pc, #452]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a70      	ldr	r2, [pc, #448]	; (800091c <MX_GPIO_Init+0x1e0>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b6e      	ldr	r3, [pc, #440]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b6a      	ldr	r3, [pc, #424]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a69      	ldr	r2, [pc, #420]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b67      	ldr	r3, [pc, #412]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b63      	ldr	r3, [pc, #396]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a62      	ldr	r2, [pc, #392]	; (800091c <MX_GPIO_Init+0x1e0>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b60      	ldr	r3, [pc, #384]	; (800091c <MX_GPIO_Init+0x1e0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b5c      	ldr	r3, [pc, #368]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a5b      	ldr	r2, [pc, #364]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b59      	ldr	r3, [pc, #356]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b55      	ldr	r3, [pc, #340]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a54      	ldr	r2, [pc, #336]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b4e      	ldr	r3, [pc, #312]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a4d      	ldr	r2, [pc, #308]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b4b      	ldr	r3, [pc, #300]	; (800091c <MX_GPIO_Init+0x1e0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2108      	movs	r1, #8
 80007fe:	4848      	ldr	r0, [pc, #288]	; (8000920 <MX_GPIO_Init+0x1e4>)
 8000800:	f000 fd74 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	4846      	ldr	r0, [pc, #280]	; (8000924 <MX_GPIO_Init+0x1e8>)
 800080a:	f000 fd6f 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080e:	2200      	movs	r2, #0
 8000810:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000814:	4844      	ldr	r0, [pc, #272]	; (8000928 <MX_GPIO_Init+0x1ec>)
 8000816:	f000 fd69 	bl	80012ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	483b      	ldr	r0, [pc, #236]	; (8000920 <MX_GPIO_Init+0x1e4>)
 8000832:	f000 fbbf 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4835      	ldr	r0, [pc, #212]	; (8000924 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fbb1 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000862:	2305      	movs	r3, #5
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	482d      	ldr	r0, [pc, #180]	; (8000924 <MX_GPIO_Init+0x1e8>)
 800086e:	f000 fba1 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0x1f0>)
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	482a      	ldr	r0, [pc, #168]	; (8000930 <MX_GPIO_Init+0x1f4>)
 8000886:	f000 fb95 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800088a:	2304      	movs	r3, #4
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4825      	ldr	r0, [pc, #148]	; (8000934 <MX_GPIO_Init+0x1f8>)
 800089e:	f000 fb89 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b4:	2305      	movs	r3, #5
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481d      	ldr	r0, [pc, #116]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80008c0:	f000 fb78 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4812      	ldr	r0, [pc, #72]	; (8000928 <MX_GPIO_Init+0x1ec>)
 80008de:	f000 fb69 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008e2:	2320      	movs	r3, #32
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_GPIO_Init+0x1ec>)
 80008f6:	f000 fb5d 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_GPIO_Init+0x1f0>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0x1e4>)
 800090e:	f000 fb51 	bl	8000fb4 <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40020800 	.word	0x40020800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	10120000 	.word	0x10120000
 8000930:	40020000 	.word	0x40020000
 8000934:	40020400 	.word	0x40020400

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fad4 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <HAL_I2C_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12c      	bne.n	8000a10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_I2C_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_I2C_MspInit+0x88>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_I2C_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <HAL_I2C_MspInit+0x8c>)
 80009f0:	f000 fae0 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_I2C_MspInit+0x88>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_I2C_MspInit+0x88>)
 80009fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_I2C_MspInit+0x88>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400

08000a24 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a28      	ldr	r2, [pc, #160]	; (8000ae4 <HAL_I2S_MspInit+0xc0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d14a      	bne.n	8000adc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_I2S_MspInit+0xc4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <HAL_I2S_MspInit+0xc8>)
 8000ab6:	f000 fa7d 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000acc:	2306      	movs	r3, #6
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_I2S_MspInit+0xcc>)
 8000ad8:	f000 fa6c 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40003c00 	.word	0x40003c00
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020800 	.word	0x40020800

08000af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b4e:	23e0      	movs	r3, #224	; 0xe0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5e:	2305      	movs	r3, #5
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_SPI_MspInit+0x8c>)
 8000b6a:	f000 fa23 	bl	8000fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013000 	.word	0x40013000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd0:	f000 f89a 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <OTG_FS_IRQHandler+0x10>)
 8000bde:	f001 fad3 	bl	8002188 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200019b8 	.word	0x200019b8

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3a:	f7ff ffd7 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f006 fdeb 	bl	8007818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fc45 	bl	80004d0 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c54:	08007920 	.word	0x08007920
  ldr r2, =_sbss
 8000c58:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000c5c:	20001dc0 	.word	0x20001dc0

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ca4 <HAL_Init+0x40>)
 8000c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_Init+0x40>)
 8000c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_Init+0x40>)
 8000c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 f94f 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f000 f808 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fe54 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x54>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x58>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f967 	bl	8000f9a <HAL_SYSTICK_Config>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00e      	b.n	8000cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b0f      	cmp	r3, #15
 8000cda:	d80a      	bhi.n	8000cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce4:	f000 f92f 	bl	8000f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce8:	4a06      	ldr	r2, [pc, #24]	; (8000d04 <HAL_InitTick+0x5c>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x20>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x24>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_IncTick+0x24>)
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	200004e4 	.word	0x200004e4

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200004e4 	.word	0x200004e4

08000d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff ffee 	bl	8000d30 <HAL_GetTick>
 8000d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d60:	d005      	beq.n	8000d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_Delay+0x44>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d6e:	bf00      	nop
 8000d70:	f7ff ffde 	bl	8000d30 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d8f7      	bhi.n	8000d70 <HAL_Delay+0x28>
  {
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4907      	ldr	r1, [pc, #28]	; (8000e2c <__NVIC_EnableIRQ+0x38>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000efc:	d301      	bcc.n	8000f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00f      	b.n	8000f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <SysTick_Config+0x40>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f10:	f7ff ff8e 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <SysTick_Config+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SysTick_Config+0x40>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff29 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff3e 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff8e 	bl	8000e84 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff31 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffa2 	bl	8000eec <SysTick_Config>
 8000fa8:	4603      	mov	r3, r0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e16b      	b.n	80012a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 815a 	bne.w	80012a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80b4 	beq.w	80012a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a5f      	ldr	r2, [pc, #380]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a5b      	ldr	r2, [pc, #364]	; (80012c4 <HAL_GPIO_Init+0x310>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_GPIO_Init+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <HAL_GPIO_Init+0x318>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a50      	ldr	r2, [pc, #320]	; (80012d0 <HAL_GPIO_Init+0x31c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x320>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x328>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_GPIO_Init+0x32c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x330>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x20a>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <HAL_GPIO_Init+0x310>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_GPIO_Init+0x334>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121e:	4a32      	ldr	r2, [pc, #200]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001224:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001248:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae90 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e12b      	b.n	800158a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fb24 	bl	8000994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001384:	f002 fb80 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 8001388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a81      	ldr	r2, [pc, #516]	; (8001594 <HAL_I2C_Init+0x274>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d807      	bhi.n	80013a4 <HAL_I2C_Init+0x84>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a80      	ldr	r2, [pc, #512]	; (8001598 <HAL_I2C_Init+0x278>)
 8001398:	4293      	cmp	r3, r2
 800139a:	bf94      	ite	ls
 800139c:	2301      	movls	r3, #1
 800139e:	2300      	movhi	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	e006      	b.n	80013b2 <HAL_I2C_Init+0x92>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a7d      	ldr	r2, [pc, #500]	; (800159c <HAL_I2C_Init+0x27c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0e7      	b.n	800158a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a78      	ldr	r2, [pc, #480]	; (80015a0 <HAL_I2C_Init+0x280>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9b      	lsrs	r3, r3, #18
 80013c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a6a      	ldr	r2, [pc, #424]	; (8001594 <HAL_I2C_Init+0x274>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d802      	bhi.n	80013f4 <HAL_I2C_Init+0xd4>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3301      	adds	r3, #1
 80013f2:	e009      	b.n	8001408 <HAL_I2C_Init+0xe8>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4a69      	ldr	r2, [pc, #420]	; (80015a4 <HAL_I2C_Init+0x284>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	3301      	adds	r3, #1
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	430b      	orrs	r3, r1
 800140e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800141a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	495c      	ldr	r1, [pc, #368]	; (8001594 <HAL_I2C_Init+0x274>)
 8001424:	428b      	cmp	r3, r1
 8001426:	d819      	bhi.n	800145c <HAL_I2C_Init+0x13c>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e59      	subs	r1, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fbb1 f3f3 	udiv	r3, r1, r3
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800143c:	400b      	ands	r3, r1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <HAL_I2C_Init+0x138>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1e59      	subs	r1, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001450:	3301      	adds	r3, #1
 8001452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001456:	e051      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 8001458:	2304      	movs	r3, #4
 800145a:	e04f      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d111      	bne.n	8001488 <HAL_I2C_Init+0x168>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e012      	b.n	80014ae <HAL_I2C_Init+0x18e>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Init+0x196>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e022      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10e      	bne.n	80014dc <HAL_I2C_Init+0x1bc>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1e58      	subs	r0, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014da:	e00f      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e58      	subs	r0, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	0099      	lsls	r1, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800152a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6911      	ldr	r1, [r2, #16]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68d2      	ldr	r2, [r2, #12]
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	000186a0 	.word	0x000186a0
 8001598:	001e847f 	.word	0x001e847f
 800159c:	003d08ff 	.word	0x003d08ff
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	10624dd3 	.word	0x10624dd3

080015a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e128      	b.n	800180c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a90      	ldr	r2, [pc, #576]	; (8001814 <HAL_I2S_Init+0x26c>)
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fa25 	bl	8000a24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015f0:	f023 030f 	bic.w	r3, r3, #15
 80015f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2202      	movs	r2, #2
 80015fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d060      	beq.n	80016c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800160e:	2310      	movs	r3, #16
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e001      	b.n	8001618 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001614:	2320      	movs	r3, #32
 8001616:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b20      	cmp	r3, #32
 800161e:	d802      	bhi.n	8001626 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001626:	2001      	movs	r0, #1
 8001628:	f002 fb24 	bl	8003c74 <HAL_RCCEx_GetPeriphCLKFreq>
 800162c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001636:	d125      	bne.n	8001684 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d010      	beq.n	8001662 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	fbb2 f2f3 	udiv	r2, r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	3305      	adds	r3, #5
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	e01f      	b.n	80016a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	fbb2 f2f3 	udiv	r2, r2, r3
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	3305      	adds	r3, #5
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	e00e      	b.n	80016a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fbb2 f2f3 	udiv	r2, r2, r3
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	3305      	adds	r3, #5
 80016a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <HAL_I2S_Init+0x270>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	08db      	lsrs	r3, r3, #3
 80016ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	e003      	b.n	80016d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d902      	bls.n	80016dc <HAL_I2S_Init+0x134>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d907      	bls.n	80016ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	f043 0210 	orr.w	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e08f      	b.n	800180c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	ea42 0103 	orr.w	r1, r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800170a:	f023 030f 	bic.w	r3, r3, #15
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6851      	ldr	r1, [r2, #4]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6892      	ldr	r2, [r2, #8]
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	68d2      	ldr	r2, [r2, #12]
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6992      	ldr	r2, [r2, #24]
 8001722:	430a      	orrs	r2, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d161      	bne.n	80017fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_I2S_Init+0x274>)
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a37      	ldr	r2, [pc, #220]	; (8001820 <HAL_I2S_Init+0x278>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_I2S_Init+0x1a4>
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <HAL_I2S_Init+0x27c>)
 800174a:	e001      	b.n	8001750 <HAL_I2S_Init+0x1a8>
 800174c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4932      	ldr	r1, [pc, #200]	; (8001820 <HAL_I2S_Init+0x278>)
 8001758:	428a      	cmp	r2, r1
 800175a:	d101      	bne.n	8001760 <HAL_I2S_Init+0x1b8>
 800175c:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_I2S_Init+0x27c>)
 800175e:	e001      	b.n	8001764 <HAL_I2S_Init+0x1bc>
 8001760:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001764:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001768:	f023 030f 	bic.w	r3, r3, #15
 800176c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <HAL_I2S_Init+0x278>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_I2S_Init+0x1d4>
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_I2S_Init+0x27c>)
 800177a:	e001      	b.n	8001780 <HAL_I2S_Init+0x1d8>
 800177c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001780:	2202      	movs	r2, #2
 8001782:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a25      	ldr	r2, [pc, #148]	; (8001820 <HAL_I2S_Init+0x278>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_I2S_Init+0x1ea>
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_I2S_Init+0x27c>)
 8001790:	e001      	b.n	8001796 <HAL_I2S_Init+0x1ee>
 8001792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a2:	d003      	beq.n	80017ac <HAL_I2S_Init+0x204>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	e001      	b.n	80017b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b29a      	uxth	r2, r3
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_I2S_Init+0x278>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_I2S_Init+0x24c>
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_I2S_Init+0x27c>)
 80017f2:	e001      	b.n	80017f8 <HAL_I2S_Init+0x250>
 80017f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f8:	897a      	ldrh	r2, [r7, #10]
 80017fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	0800191f 	.word	0x0800191f
 8001818:	cccccccd 	.word	0xcccccccd
 800181c:	08001a35 	.word	0x08001a35
 8001820:	40003800 	.word	0x40003800
 8001824:	40003400 	.word	0x40003400

08001828 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	1c9a      	adds	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10e      	bne.n	80018b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffb8 	bl	8001828 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	b292      	uxth	r2, r2
 80018d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	1c9a      	adds	r2, r3, #2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10e      	bne.n	8001916 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001906:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff93 	bl	800183c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b04      	cmp	r3, #4
 8001938:	d13a      	bne.n	80019b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d109      	bne.n	8001958 <I2S_IRQHandler+0x3a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d102      	bne.n	8001958 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffb4 	bl	80018c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	2b40      	cmp	r3, #64	; 0x40
 8001960:	d126      	bne.n	80019b0 <I2S_IRQHandler+0x92>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b20      	cmp	r3, #32
 800196e:	d11f      	bne.n	80019b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800197e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0202 	orr.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ff50 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d136      	bne.n	8001a2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d109      	bne.n	80019da <I2S_IRQHandler+0xbc>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b80      	cmp	r3, #128	; 0x80
 80019d2:	d102      	bne.n	80019da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff45 	bl	8001864 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d122      	bne.n	8001a2a <I2S_IRQHandler+0x10c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d11b      	bne.n	8001a2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f043 0204 	orr.w	r2, r3, #4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff13 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4aa2      	ldr	r2, [pc, #648]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a4e:	4ba2      	ldr	r3, [pc, #648]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a50:	e001      	b.n	8001a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a9b      	ldr	r2, [pc, #620]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001a6c:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a6e:	e001      	b.n	8001a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001a70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d004      	beq.n	8001a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8099 	bne.w	8001bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f925 	bl	8001cf0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9c8 	bl	8001e50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d13a      	bne.n	8001b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d035      	beq.n	8001b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a7e      	ldr	r2, [pc, #504]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d101      	bne.n	8001ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001ade:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ae0:	e001      	b.n	8001ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4979      	ldr	r1, [pc, #484]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001aee:	428b      	cmp	r3, r1
 8001af0:	d101      	bne.n	8001af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001af2:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001af4:	e001      	b.n	8001afa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001afa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001afe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f043 0202 	orr.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fe88 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	f040 80be 	bne.w	8001cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80b8 	beq.w	8001cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a59      	ldr	r2, [pc, #356]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001b72:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b74:	e001      	b.n	8001b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4954      	ldr	r1, [pc, #336]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b82:	428b      	cmp	r3, r1
 8001b84:	d101      	bne.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fe4a 	bl	8001850 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bbc:	e084      	b.n	8001cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d107      	bne.n	8001bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8be 	bl	8001d54 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8fd 	bl	8001dec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d12f      	bne.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d02a      	beq.n	8001c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c14:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2e      	ldr	r2, [pc, #184]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c22:	e001      	b.n	8001c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d101      	bne.n	8001c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c36:	e001      	b.n	8001c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fdfa 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d131      	bne.n	8001cca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02c      	beq.n	8001cca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c7c:	e001      	b.n	8001c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001c7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4912      	ldr	r1, [pc, #72]	; (8001cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c8a:	428b      	cmp	r3, r1
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c90:	e001      	b.n	8001c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001c92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001caa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fdc5 	bl	8001850 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cc6:	e000      	b.n	8001cca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cc8:	bf00      	nop
}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40003800 	.word	0x40003800
 8001cd8:	40003400 	.word	0x40003400

08001cdc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c99      	adds	r1, r3, #2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6251      	str	r1, [r2, #36]	; 0x24
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d106      	bne.n	8001d4a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffc9 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c99      	adds	r1, r3, #2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6251      	str	r1, [r2, #36]	; 0x24
 8001d66:	8819      	ldrh	r1, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <I2SEx_TxISR_I2SExt+0x90>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <I2SEx_TxISR_I2SExt+0x22>
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <I2SEx_TxISR_I2SExt+0x94>)
 8001d74:	e001      	b.n	8001d7a <I2SEx_TxISR_I2SExt+0x26>
 8001d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d7a:	460a      	mov	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <I2SEx_TxISR_I2SExt+0x90>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <I2SEx_TxISR_I2SExt+0x50>
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <I2SEx_TxISR_I2SExt+0x94>)
 8001da2:	e001      	b.n	8001da8 <I2SEx_TxISR_I2SExt+0x54>
 8001da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <I2SEx_TxISR_I2SExt+0x90>)
 8001db0:	428b      	cmp	r3, r1
 8001db2:	d101      	bne.n	8001db8 <I2SEx_TxISR_I2SExt+0x64>
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <I2SEx_TxISR_I2SExt+0x94>)
 8001db6:	e001      	b.n	8001dbc <I2SEx_TxISR_I2SExt+0x68>
 8001db8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dc0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d106      	bne.n	8001dda <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff81 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40003800 	.word	0x40003800
 8001de8:	40003400 	.word	0x40003400

08001dec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68d8      	ldr	r0, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	1c99      	adds	r1, r3, #2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e04:	b282      	uxth	r2, r0
 8001e06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d113      	bne.n	8001e48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff4a 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <I2SEx_RxISR_I2SExt+0x16>
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8001e64:	e001      	b.n	8001e6a <I2SEx_RxISR_I2SExt+0x1a>
 8001e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e6a:	68d8      	ldr	r0, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	1c99      	adds	r1, r3, #2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e76:	b282      	uxth	r2, r0
 8001e78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d121      	bne.n	8001ed6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <I2SEx_RxISR_I2SExt+0x50>
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8001e9e:	e001      	b.n	8001ea4 <I2SEx_RxISR_I2SExt+0x54>
 8001ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <I2SEx_RxISR_I2SExt+0x90>)
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d101      	bne.n	8001eb4 <I2SEx_RxISR_I2SExt+0x64>
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <I2SEx_RxISR_I2SExt+0x94>)
 8001eb2:	e001      	b.n	8001eb8 <I2SEx_RxISR_I2SExt+0x68>
 8001eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ebc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff03 	bl	8001cdc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40003800 	.word	0x40003800
 8001ee4:	40003400 	.word	0x40003400

08001ee8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	b08f      	sub	sp, #60	; 0x3c
 8001eec:	af0a      	add	r7, sp, #40	; 0x28
 8001eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e10f      	b.n	800211a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f005 f95d 	bl	80071d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 f896 	bl	800406a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687e      	ldr	r6, [r7, #4]
 8001f46:	466d      	mov	r5, sp
 8001f48:	f106 0410 	add.w	r4, r6, #16
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5c:	1d33      	adds	r3, r6, #4
 8001f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f001 ff6e 	bl	8003e42 <USB_CoreInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 f884 	bl	800408c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e04a      	b.n	8002020 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	333d      	adds	r3, #61	; 0x3d
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	1a9b      	subs	r3, r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	333c      	adds	r3, #60	; 0x3c
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	b298      	uxth	r0, r3
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3342      	adds	r3, #66	; 0x42
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	333f      	adds	r3, #63	; 0x3f
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3344      	adds	r3, #68	; 0x44
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3348      	adds	r3, #72	; 0x48
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3350      	adds	r3, #80	; 0x50
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	3301      	adds	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d3af      	bcc.n	8001f8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e044      	b.n	80020ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3301      	adds	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3b5      	bcc.n	8002030 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	687e      	ldr	r6, [r7, #4]
 80020cc:	466d      	mov	r5, sp
 80020ce:	f106 0410 	add.w	r4, r6, #16
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020de:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e2:	1d33      	adds	r3, r6, #4
 80020e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f001 fffa 	bl	80040e0 <USB_DevInit>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00d      	b.n	800211a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 f842 	bl	800519c <USB_DevDisconnect>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002122 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_PCD_Start+0x1c>
 800213a:	2302      	movs	r3, #2
 800213c:	e020      	b.n	8002180 <HAL_PCD_Start+0x5e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d109      	bne.n	8002162 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f001 ff6e 	bl	8004048 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f002 fff2 	bl	800515a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b08d      	sub	sp, #52	; 0x34
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 f8b0 	bl	8005304 <USB_GetMode>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 839d 	bne.w	80028e6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 f814 	bl	80051de <USB_ReadInterrupts>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8393 	beq.w	80028e4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 f80b 	bl	80051de <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f002 0202 	and.w	r2, r2, #2
 80021e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fff9 	bl	80051de <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d161      	bne.n	80022ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0210 	bic.w	r2, r2, #16
 8002204:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f003 020f 	and.w	r2, r3, #15
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	0c5b      	lsrs	r3, r3, #17
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	2b02      	cmp	r3, #2
 8002230:	d124      	bne.n	800227c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d035      	beq.n	80022aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6a38      	ldr	r0, [r7, #32]
 8002252:	f002 fe5f 	bl	8004f14 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002262:	441a      	add	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	699a      	ldr	r2, [r3, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002274:	441a      	add	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	619a      	str	r2, [r3, #24]
 800227a:	e016      	b.n	80022aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	0c5b      	lsrs	r3, r3, #17
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	2b06      	cmp	r3, #6
 8002286:	d110      	bne.n	80022aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800228e:	2208      	movs	r2, #8
 8002290:	4619      	mov	r1, r3
 8002292:	6a38      	ldr	r0, [r7, #32]
 8002294:	f002 fe3e 	bl	8004f14 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a4:	441a      	add	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0210 	orr.w	r2, r2, #16
 80022b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 ff8d 	bl	80051de <USB_ReadInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022ce:	d16e      	bne.n	80023ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 ff93 	bl	8005204 <USB_ReadDevAllOutEpInterrupt>
 80022de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022e0:	e062      	b.n	80023a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d057      	beq.n	800239c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 ffb8 	bl	800526c <USB_ReadDevOutEPInterrupt>
 80022fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00c      	beq.n	8002322 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	461a      	mov	r2, r3
 8002316:	2301      	movs	r3, #1
 8002318:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800231a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fdb1 	bl	8002e84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00c      	beq.n	8002346 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002338:	461a      	mov	r2, r3
 800233a:	2308      	movs	r3, #8
 800233c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800233e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 feab 	bl	800309c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	2310      	movs	r3, #16
 8002360:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	4413      	add	r3, r2
 8002374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002378:	461a      	mov	r2, r3
 800237a:	2320      	movs	r3, #32
 800237c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3301      	adds	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d199      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 ff13 	bl	80051de <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023c2:	f040 80c0 	bne.w	8002546 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 ff34 	bl	8005238 <USB_ReadDevAllInEpInterrupt>
 80023d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023d6:	e0b2      	b.n	800253e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80a7 	beq.w	8002532 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 ff5a 	bl	80052a8 <USB_ReadDevInEPInterrupt>
 80023f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d057      	beq.n	80024b0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	69f9      	ldr	r1, [r7, #28]
 800241c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002420:	4013      	ands	r3, r2
 8002422:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002430:	461a      	mov	r2, r3
 8002432:	2301      	movs	r3, #1
 8002434:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d132      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3348      	adds	r3, #72	; 0x48
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4403      	add	r3, r0
 800245e:	3344      	adds	r3, #68	; 0x44
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4419      	add	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4403      	add	r3, r0
 8002472:	3348      	adds	r3, #72	; 0x48
 8002474:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d113      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x31c>
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3350      	adds	r3, #80	; 0x50
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800249c:	461a      	mov	r2, r3
 800249e:	2101      	movs	r1, #1
 80024a0:	f002 ff62 	bl	8005368 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f004 ff21 	bl	80072f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c6:	461a      	mov	r2, r3
 80024c8:	2308      	movs	r3, #8
 80024ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e2:	461a      	mov	r2, r3
 80024e4:	2310      	movs	r3, #16
 80024e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fe:	461a      	mov	r2, r3
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251a:	461a      	mov	r2, r3
 800251c:	2302      	movs	r3, #2
 800251e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800252a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fc1b 	bl	8002d68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	f47f af49 	bne.w	80023d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fe47 	bl	80051de <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800255a:	d122      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002582:	2100      	movs	r1, #0
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fe27 	bl	80031d8 <HAL_PCDEx_LPM_Callback>
 800258a:	e002      	b.n	8002592 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f004 ff27 	bl	80073e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fe19 	bl	80051de <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b6:	d112      	bne.n	80025de <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f004 fee3 	bl	8007394 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025dc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fdfb 	bl	80051de <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f2:	f040 80c7 	bne.w	8002784 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2110      	movs	r1, #16
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fec9 	bl	80043a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261a:	e056      	b.n	80026ca <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002628:	461a      	mov	r2, r3
 800262a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800262e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002640:	0151      	lsls	r1, r2, #5
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	440a      	add	r2, r1
 8002646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800264a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800264e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002660:	0151      	lsls	r1, r2, #5
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	440a      	add	r2, r1
 8002666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800266a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800266e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	461a      	mov	r2, r3
 800267e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002682:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4413      	add	r3, r2
 800268c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002694:	0151      	lsls	r1, r2, #5
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	440a      	add	r2, r1
 800269a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800269e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b4:	0151      	lsls	r1, r2, #5
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	440a      	add	r2, r1
 80026ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	3301      	adds	r3, #1
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3a3      	bcc.n	800261c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026e6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d016      	beq.n	800271e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002700:	f043 030b 	orr.w	r3, r3, #11
 8002704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002716:	f043 030b 	orr.w	r3, r3, #11
 800271a:	6453      	str	r3, [r2, #68]	; 0x44
 800271c:	e015      	b.n	800274a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002730:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002734:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002744:	f043 030b 	orr.w	r3, r3, #11
 8002748:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002758:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800275c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800276e:	461a      	mov	r2, r3
 8002770:	f002 fdfa 	bl	8005368 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fd28 	bl	80051de <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d124      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fdbe 	bl	8005320 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 fe5e 	bl	800446a <USB_GetDevSpeed>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	f001 f959 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 80027be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	4620      	mov	r0, r4
 80027ca:	f001 fb9b 	bl	8003f04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f004 fdb7 	bl	8007342 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fcf8 	bl	80051de <USB_ReadInterrupts>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d10a      	bne.n	800280e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f004 fd94 	bl	8007326 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 0208 	and.w	r2, r2, #8
 800280c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 fce3 	bl	80051de <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002822:	d10f      	bne.n	8002844 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	b2db      	uxtb	r3, r3
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f004 fdf6 	bl	8007420 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fcc8 	bl	80051de <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002858:	d10f      	bne.n	800287a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f004 fdc9 	bl	80073fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 fcad 	bl	80051de <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d10a      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f004 fdd7 	bl	8007444 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fc97 	bl	80051de <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d115      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f004 fdc7 	bl	8007460 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	e000      	b.n	80028e6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80028e4:	bf00      	nop
    }
  }
}
 80028e6:	3734      	adds	r7, #52	; 0x34
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}

080028ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_PCD_SetAddress+0x1a>
 8002902:	2302      	movs	r3, #2
 8002904:	e013      	b.n	800292e <HAL_PCD_SetAddress+0x42>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fbf5 	bl	800510e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	4608      	mov	r0, r1
 8002940:	4611      	mov	r1, r2
 8002942:	461a      	mov	r2, r3
 8002944:	4603      	mov	r3, r0
 8002946:	70fb      	strb	r3, [r7, #3]
 8002948:	460b      	mov	r3, r1
 800294a:	803b      	strh	r3, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da0f      	bge.n	800297c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	f003 020f 	and.w	r2, r3, #15
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	3338      	adds	r3, #56	; 0x38
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	3304      	adds	r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	705a      	strb	r2, [r3, #1]
 800297a:	e00f      	b.n	800299c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	3304      	adds	r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a8:	883a      	ldrh	r2, [r7, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	78ba      	ldrb	r2, [r7, #2]
 80029b2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c6:	78bb      	ldrb	r3, [r7, #2]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d102      	bne.n	80029d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_PCD_EP_Open+0xaa>
 80029dc:	2302      	movs	r3, #2
 80029de:	e00e      	b.n	80029fe <HAL_PCD_EP_Open+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fd60 	bl	80044b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029fc:	7afb      	ldrb	r3, [r7, #11]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da0f      	bge.n	8002a3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	3338      	adds	r3, #56	; 0x38
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3304      	adds	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	705a      	strb	r2, [r3, #1]
 8002a38:	e00f      	b.n	8002a5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	f003 020f 	and.w	r2, r3, #15
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	3304      	adds	r3, #4
 8002a52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_PCD_EP_Close+0x6e>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e00e      	b.n	8002a92 <HAL_PCD_EP_Close+0x8c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fd9e 	bl	80045c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d102      	bne.n	8002af6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6979      	ldr	r1, [r7, #20]
 8002b0e:	f002 f879 	bl	8004c04 <USB_EP0StartXfer>
 8002b12:	e008      	b.n	8002b26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6979      	ldr	r1, [r7, #20]
 8002b22:	f001 fe2b 	bl	800477c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	3338      	adds	r3, #56	; 0x38
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	3304      	adds	r3, #4
 8002b86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2200      	movs	r2, #0
 8002b98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba0:	7afb      	ldrb	r3, [r7, #11]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	f002 f817 	bl	8004c04 <USB_EP0StartXfer>
 8002bd6:	e008      	b.n	8002bea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	6979      	ldr	r1, [r7, #20]
 8002be6:	f001 fdc9 	bl	800477c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d901      	bls.n	8002c12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e050      	b.n	8002cb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da0f      	bge.n	8002c3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	3338      	adds	r3, #56	; 0x38
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	705a      	strb	r2, [r3, #1]
 8002c38:	e00d      	b.n	8002c56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_PCD_EP_SetStall+0x82>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e01e      	b.n	8002cb4 <HAL_PCD_EP_SetStall+0xc0>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68f9      	ldr	r1, [r7, #12]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f002 f96e 	bl	8004f66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	b2d9      	uxtb	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f002 fb5f 	bl	8005368 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d901      	bls.n	8002cda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e042      	b.n	8002d60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0f      	bge.n	8002d02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3338      	adds	r3, #56	; 0x38
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	705a      	strb	r2, [r3, #1]
 8002d00:	e00f      	b.n	8002d22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_PCD_EP_ClrStall+0x86>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00e      	b.n	8002d60 <HAL_PCD_EP_ClrStall+0xa4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 f976 	bl	8005042 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	3338      	adds	r3, #56	; 0x38
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d901      	bls.n	8002da0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e06c      	b.n	8002e7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d902      	bls.n	8002dbc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc4:	e02b      	b.n	8002e1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d902      	bls.n	8002de2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3303      	adds	r3, #3
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	68d9      	ldr	r1, [r3, #12]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6978      	ldr	r0, [r7, #20]
 8002e02:	f002 f852 	bl	8004eaa <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	441a      	add	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d809      	bhi.n	8002e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d203      	bcs.n	8002e48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1be      	bne.n	8002dc6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d811      	bhi.n	8002e78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	6939      	ldr	r1, [r7, #16]
 8002e70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e74:	4013      	ands	r3, r2
 8002e76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	f040 80a0 	bne.w	8002ffc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a72      	ldr	r2, [pc, #456]	; (8003094 <PCD_EP_OutXfrComplete_int+0x210>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	f240 80dd 	bls.w	800308a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80d7 	beq.w	800308a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eee:	6093      	str	r3, [r2, #8]
 8002ef0:	e0cb      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	e0bc      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 80b7 	bne.w	800308a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a5d      	ldr	r2, [pc, #372]	; (8003094 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d90f      	bls.n	8002f44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	e0a2      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	0159      	lsls	r1, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4403      	add	r3, r0
 8002f7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4419      	add	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4403      	add	r3, r0
 8002fb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d114      	bne.n	8002fee <PCD_EP_OutXfrComplete_int+0x16a>
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2101      	movs	r1, #1
 8002fea:	f002 f9bd 	bl	8005368 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f004 f961 	bl	80072bc <HAL_PCD_DataOutStageCallback>
 8002ffa:	e046      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a26      	ldr	r2, [pc, #152]	; (8003098 <PCD_EP_OutXfrComplete_int+0x214>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d124      	bne.n	800304e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e032      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	2320      	movs	r3, #32
 800303e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f004 f938 	bl	80072bc <HAL_PCD_DataOutStageCallback>
 800304c:	e01d      	b.n	800308a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d114      	bne.n	800307e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d108      	bne.n	800307e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003076:	461a      	mov	r2, r3
 8003078:	2100      	movs	r1, #0
 800307a:	f002 f975 	bl	8005368 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f004 f919 	bl	80072bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	4f54300a 	.word	0x4f54300a
 8003098:	4f54310a 	.word	0x4f54310a

0800309c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	333c      	adds	r3, #60	; 0x3c
 80030b4:	3304      	adds	r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a15      	ldr	r2, [pc, #84]	; (8003124 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d90e      	bls.n	80030f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f004 f8d1 	bl	8007298 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <PCD_EP_OutSetupPacket_int+0x88>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d90c      	bls.n	8003118 <PCD_EP_OutSetupPacket_int+0x7c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d108      	bne.n	8003118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003110:	461a      	mov	r2, r3
 8003112:	2101      	movs	r1, #1
 8003114:	f002 f928 	bl	8005368 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	4f54300a 	.word	0x4f54300a

08003128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
 8003134:	4613      	mov	r3, r2
 8003136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003146:	883b      	ldrh	r3, [r7, #0]
 8003148:	0419      	lsls	r1, r3, #16
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	430a      	orrs	r2, r1
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
 8003154:	e028      	b.n	80031a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4413      	add	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e00d      	b.n	8003186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	3340      	adds	r3, #64	; 0x40
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	3301      	adds	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	3b01      	subs	r3, #1
 800318c:	429a      	cmp	r2, r3
 800318e:	d3ec      	bcc.n	800316a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003190:	883b      	ldrh	r3, [r7, #0]
 8003192:	0418      	lsls	r0, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	3b01      	subs	r3, #1
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	4302      	orrs	r2, r0
 80031a0:	3340      	adds	r3, #64	; 0x40
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	460b      	mov	r3, r1
 80031c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e264      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d075      	beq.n	80032fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800320e:	4ba3      	ldr	r3, [pc, #652]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b04      	cmp	r3, #4
 8003218:	d00c      	beq.n	8003234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321a:	4ba0      	ldr	r3, [pc, #640]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d112      	bne.n	800324c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003226:	4b9d      	ldr	r3, [pc, #628]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003232:	d10b      	bne.n	800324c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	4b99      	ldr	r3, [pc, #612]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d05b      	beq.n	80032f8 <HAL_RCC_OscConfig+0x108>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d157      	bne.n	80032f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e23f      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x74>
 8003256:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a90      	ldr	r2, [pc, #576]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xb0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0x98>
 800326e:	4b8b      	ldr	r3, [pc, #556]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a8a      	ldr	r2, [pc, #552]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a87      	ldr	r2, [pc, #540]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xb0>
 8003288:	4b84      	ldr	r3, [pc, #528]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a83      	ldr	r2, [pc, #524]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b81      	ldr	r3, [pc, #516]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a80      	ldr	r2, [pc, #512]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fd fd42 	bl	8000d30 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fd fd3e 	bl	8000d30 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e204      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xc0>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fd fd2e 	bl	8000d30 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fd fd2a 	bl	8000d30 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1f0      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b6c      	ldr	r3, [pc, #432]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0xe8>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d063      	beq.n	80033ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003306:	4b65      	ldr	r3, [pc, #404]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003312:	4b62      	ldr	r3, [pc, #392]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800331e:	4b5f      	ldr	r3, [pc, #380]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x152>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1c4      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b56      	ldr	r3, [pc, #344]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4952      	ldr	r1, [pc, #328]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b4f      	ldr	r3, [pc, #316]	; (80034a0 <HAL_RCC_OscConfig+0x2b0>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fd fce3 	bl	8000d30 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336e:	f7fd fcdf 	bl	8000d30 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1a5      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4940      	ldr	r1, [pc, #256]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_OscConfig+0x2b0>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a8:	f7fd fcc2 	bl	8000d30 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fd fcbe 	bl	8000d30 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e184      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d030      	beq.n	800343c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b30      	ldr	r3, [pc, #192]	; (80034a4 <HAL_RCC_OscConfig+0x2b4>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd fca2 	bl	8000d30 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fd fc9e 	bl	8000d30 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e164      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b26      	ldr	r3, [pc, #152]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x200>
 800340e:	e015      	b.n	800343c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003410:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x2b4>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003416:	f7fd fc8b 	bl	8000d30 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341e:	f7fd fc87 	bl	8000d30 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e14d      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a0 	beq.w	800358a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10f      	bne.n	800347a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
 800346a:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_RCC_OscConfig+0x2ac>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_OscConfig+0x2b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d121      	bne.n	80034ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_RCC_OscConfig+0x2b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_RCC_OscConfig+0x2b8>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003492:	f7fd fc4d 	bl	8000d30 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	e011      	b.n	80034be <HAL_RCC_OscConfig+0x2ce>
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	42470000 	.word	0x42470000
 80034a4:	42470e80 	.word	0x42470e80
 80034a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ac:	f7fd fc40 	bl	8000d30 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e106      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_RCC_OscConfig+0x4e4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x2f0>
 80034d2:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a80      	ldr	r2, [pc, #512]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	e01c      	b.n	800351a <HAL_RCC_OscConfig+0x32a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x312>
 80034e8:	4b7b      	ldr	r3, [pc, #492]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a7a      	ldr	r2, [pc, #488]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	4b78      	ldr	r3, [pc, #480]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a77      	ldr	r2, [pc, #476]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003500:	e00b      	b.n	800351a <HAL_RCC_OscConfig+0x32a>
 8003502:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a74      	ldr	r2, [pc, #464]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	4b72      	ldr	r3, [pc, #456]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a71      	ldr	r2, [pc, #452]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd fc05 	bl	8000d30 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fc01 	bl	8000d30 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0c5      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b65      	ldr	r3, [pc, #404]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCC_OscConfig+0x33a>
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fd fbef 	bl	8000d30 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fbeb 	bl	8000d30 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0af      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b56      	ldr	r3, [pc, #344]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a55      	ldr	r2, [pc, #340]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 809b 	beq.w	80036ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d05c      	beq.n	800365a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d141      	bne.n	800362c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCC_OscConfig+0x4ec>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fbbf 	bl	8000d30 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fd fbbb 	bl	8000d30 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e081      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	019b      	lsls	r3, r3, #6
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	3b01      	subs	r3, #1
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	061b      	lsls	r3, r3, #24
 80035f8:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <HAL_RCC_OscConfig+0x4ec>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fb94 	bl	8000d30 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fb90 	bl	8000d30 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e056      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x41c>
 800362a:	e04e      	b.n	80036ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCC_OscConfig+0x4ec>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003632:	f7fd fb7d 	bl	8000d30 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363a:	f7fd fb79 	bl	8000d30 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e03f      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x44a>
 8003658:	e037      	b.n	80036ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e032      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_RCC_OscConfig+0x4e8>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d028      	beq.n	80036c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d121      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d11a      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003696:	4013      	ands	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800369c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369e:	4293      	cmp	r3, r2
 80036a0:	d111      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40007000 	.word	0x40007000
 80036d8:	40023800 	.word	0x40023800
 80036dc:	42470060 	.word	0x42470060

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0cc      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b68      	ldr	r3, [pc, #416]	; (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d90c      	bls.n	800371c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b65      	ldr	r3, [pc, #404]	; (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370a:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d001      	beq.n	800371c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0b8      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003734:	4b59      	ldr	r3, [pc, #356]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a58      	ldr	r2, [pc, #352]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800373e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800374c:	4b53      	ldr	r3, [pc, #332]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a52      	ldr	r2, [pc, #328]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	494d      	ldr	r1, [pc, #308]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d044      	beq.n	8003800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d119      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e07f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d003      	beq.n	800379e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	2b03      	cmp	r3, #3
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b3f      	ldr	r3, [pc, #252]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e06f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e067      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4934      	ldr	r1, [pc, #208]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d0:	f7fd faae 	bl	8000d30 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7fd faaa 	bl	8000d30 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e04f      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d20c      	bcs.n	8003828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b20      	ldr	r3, [pc, #128]	; (8003898 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e032      	b.n	800388e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4916      	ldr	r1, [pc, #88]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	490e      	ldr	r1, [pc, #56]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003866:	f000 f821 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 800386a:	4602      	mov	r2, r0
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	490a      	ldr	r1, [pc, #40]	; (80038a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	5ccb      	ldrb	r3, [r1, r3]
 800387a:	fa22 f303 	lsr.w	r3, r2, r3
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fa0e 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023c00 	.word	0x40023c00
 800389c:	40023800 	.word	0x40023800
 80038a0:	080078f8 	.word	0x080078f8
 80038a4:	20000000 	.word	0x20000000
 80038a8:	20000004 	.word	0x20000004

080038ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	2300      	movs	r3, #0
 80038be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c4:	4b67      	ldr	r3, [pc, #412]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 030c 	and.w	r3, r3, #12
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d00d      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x40>
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	f200 80bd 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x34>
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038de:	e0b7      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038e2:	60bb      	str	r3, [r7, #8]
       break;
 80038e4:	e0b7      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e6:	4b61      	ldr	r3, [pc, #388]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038e8:	60bb      	str	r3, [r7, #8]
      break;
 80038ea:	e0b4      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ec:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d04d      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003902:	4b58      	ldr	r3, [pc, #352]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	461a      	mov	r2, r3
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	ea02 0800 	and.w	r8, r2, r0
 800391a:	ea03 0901 	and.w	r9, r3, r1
 800391e:	4640      	mov	r0, r8
 8003920:	4649      	mov	r1, r9
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	014b      	lsls	r3, r1, #5
 800392c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003930:	0142      	lsls	r2, r0, #5
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	ebb0 0008 	subs.w	r0, r0, r8
 800393a:	eb61 0109 	sbc.w	r1, r1, r9
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	018b      	lsls	r3, r1, #6
 8003948:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800394c:	0182      	lsls	r2, r0, #6
 800394e:	1a12      	subs	r2, r2, r0
 8003950:	eb63 0301 	sbc.w	r3, r3, r1
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	00d9      	lsls	r1, r3, #3
 800395e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003962:	00d0      	lsls	r0, r2, #3
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	eb12 0208 	adds.w	r2, r2, r8
 800396c:	eb43 0309 	adc.w	r3, r3, r9
 8003970:	f04f 0000 	mov.w	r0, #0
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	0259      	lsls	r1, r3, #9
 800397a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800397e:	0250      	lsls	r0, r2, #9
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	f7fc fc22 	bl	80001d8 <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e04a      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	ea02 0400 	and.w	r4, r2, r0
 80039b6:	ea03 0501 	and.w	r5, r3, r1
 80039ba:	4620      	mov	r0, r4
 80039bc:	4629      	mov	r1, r5
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	014b      	lsls	r3, r1, #5
 80039c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039cc:	0142      	lsls	r2, r0, #5
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	1b00      	subs	r0, r0, r4
 80039d4:	eb61 0105 	sbc.w	r1, r1, r5
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	018b      	lsls	r3, r1, #6
 80039e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039e6:	0182      	lsls	r2, r0, #6
 80039e8:	1a12      	subs	r2, r2, r0
 80039ea:	eb63 0301 	sbc.w	r3, r3, r1
 80039ee:	f04f 0000 	mov.w	r0, #0
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	00d9      	lsls	r1, r3, #3
 80039f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039fc:	00d0      	lsls	r0, r2, #3
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	1912      	adds	r2, r2, r4
 8003a04:	eb45 0303 	adc.w	r3, r5, r3
 8003a08:	f04f 0000 	mov.w	r0, #0
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	0299      	lsls	r1, r3, #10
 8003a12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a16:	0290      	lsls	r0, r2, #10
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	f7fc fbd6 	bl	80001d8 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a52:	60bb      	str	r3, [r7, #8]
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	68bb      	ldr	r3, [r7, #8]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a8c:	f7ff fff0 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	08007908 	.word	0x08007908

08003ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d035      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ad8:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ade:	f7fd f927 	bl	8000d30 <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ae6:	f7fd f923 	bl	8000d30 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0b0      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af8:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	019a      	lsls	r2, r3, #6
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	071b      	lsls	r3, r3, #28
 8003b10:	4955      	ldr	r1, [pc, #340]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b18:	4b52      	ldr	r3, [pc, #328]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b1e:	f7fd f907 	bl	8000d30 <HAL_GetTick>
 8003b22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b26:	f7fd f903 	bl	8000d30 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e090      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8083 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4a43      	ldr	r2, [pc, #268]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b6e:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd f8d9 	bl	8000d30 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fd f8d5 	bl	8000d30 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e062      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba0:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d02f      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d028      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbe:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bce:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003bd4:	4a24      	ldr	r2, [pc, #144]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bda:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d114      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fd f8a3 	bl	8000d30 <HAL_GetTick>
 8003bea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd f89f 	bl	8000d30 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e02a      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ee      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c1c:	d10d      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c32:	490d      	ldr	r1, [pc, #52]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]
 8003c38:	e005      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c44:	6093      	str	r3, [r2, #8]
 8003c46:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	4905      	ldr	r1, [pc, #20]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	42470068 	.word	0x42470068
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40007000 	.word	0x40007000
 8003c70:	42470e40 	.word	0x42470e40

08003c74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d13e      	bne.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d12f      	bne.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003caa:	617b      	str	r3, [r7, #20]
          break;
 8003cac:	e02f      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cba:	d108      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cbc:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc4:	4a18      	ldr	r2, [pc, #96]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e007      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	0f1b      	lsrs	r3, r3, #28
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]
          break;
 8003d06:	e002      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
          break;
 8003d0c:	bf00      	nop
        }
      }
      break;
 8003d0e:	bf00      	nop
    }
  }
  return frequency;
 8003d10:	697b      	ldr	r3, [r7, #20]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	00bb8000 	.word	0x00bb8000
 8003d28:	007a1200 	.word	0x007a1200
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e07b      	b.n	8003e3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d52:	d009      	beq.n	8003d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
 8003d5a:	e005      	b.n	8003d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fc feb6 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	ea42 0103 	orr.w	r1, r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	f003 0104 	and.w	r1, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f003 0210 	and.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e42:	b084      	sub	sp, #16
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	f107 001c 	add.w	r0, r7, #28
 8003e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d122      	bne.n	8003ea0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f001 fac5 	bl	8005424 <USB_CoreReset>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e01a      	b.n	8003ed6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f001 fab9 	bl	8005424 <USB_CoreReset>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec8:	e005      	b.n	8003ed6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10b      	bne.n	8003ef4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f043 0206 	orr.w	r2, r3, #6
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f00:	b004      	add	sp, #16
 8003f02:	4770      	bx	lr

08003f04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d165      	bne.n	8003fe4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4a41      	ldr	r2, [pc, #260]	; (8004020 <USB_SetTurnaroundTime+0x11c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d906      	bls.n	8003f2e <USB_SetTurnaroundTime+0x2a>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4a40      	ldr	r2, [pc, #256]	; (8004024 <USB_SetTurnaroundTime+0x120>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d202      	bcs.n	8003f2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f28:	230f      	movs	r3, #15
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	e062      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a3c      	ldr	r2, [pc, #240]	; (8004024 <USB_SetTurnaroundTime+0x120>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d306      	bcc.n	8003f44 <USB_SetTurnaroundTime+0x40>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <USB_SetTurnaroundTime+0x124>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d202      	bcs.n	8003f44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f3e:	230e      	movs	r3, #14
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e057      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4a38      	ldr	r2, [pc, #224]	; (8004028 <USB_SetTurnaroundTime+0x124>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d306      	bcc.n	8003f5a <USB_SetTurnaroundTime+0x56>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4a37      	ldr	r2, [pc, #220]	; (800402c <USB_SetTurnaroundTime+0x128>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d202      	bcs.n	8003f5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f54:	230d      	movs	r3, #13
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e04c      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <USB_SetTurnaroundTime+0x128>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d306      	bcc.n	8003f70 <USB_SetTurnaroundTime+0x6c>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4a32      	ldr	r2, [pc, #200]	; (8004030 <USB_SetTurnaroundTime+0x12c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d802      	bhi.n	8003f70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	e041      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a2f      	ldr	r2, [pc, #188]	; (8004030 <USB_SetTurnaroundTime+0x12c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d906      	bls.n	8003f86 <USB_SetTurnaroundTime+0x82>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <USB_SetTurnaroundTime+0x130>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d802      	bhi.n	8003f86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f80:	230b      	movs	r3, #11
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e036      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a2a      	ldr	r2, [pc, #168]	; (8004034 <USB_SetTurnaroundTime+0x130>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d906      	bls.n	8003f9c <USB_SetTurnaroundTime+0x98>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <USB_SetTurnaroundTime+0x134>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d802      	bhi.n	8003f9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f96:	230a      	movs	r3, #10
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e02b      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a26      	ldr	r2, [pc, #152]	; (8004038 <USB_SetTurnaroundTime+0x134>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d906      	bls.n	8003fb2 <USB_SetTurnaroundTime+0xae>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a25      	ldr	r2, [pc, #148]	; (800403c <USB_SetTurnaroundTime+0x138>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d202      	bcs.n	8003fb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003fac:	2309      	movs	r3, #9
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e020      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4a21      	ldr	r2, [pc, #132]	; (800403c <USB_SetTurnaroundTime+0x138>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d306      	bcc.n	8003fc8 <USB_SetTurnaroundTime+0xc4>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4a20      	ldr	r2, [pc, #128]	; (8004040 <USB_SetTurnaroundTime+0x13c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d802      	bhi.n	8003fc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e015      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <USB_SetTurnaroundTime+0x13c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d906      	bls.n	8003fde <USB_SetTurnaroundTime+0xda>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <USB_SetTurnaroundTime+0x140>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d202      	bcs.n	8003fde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fd8:	2307      	movs	r3, #7
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e00a      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fde:	2306      	movs	r3, #6
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e007      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fea:	2309      	movs	r3, #9
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e001      	b.n	8003ff4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ff0:	2309      	movs	r3, #9
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	00d8acbf 	.word	0x00d8acbf
 8004024:	00e4e1c0 	.word	0x00e4e1c0
 8004028:	00f42400 	.word	0x00f42400
 800402c:	01067380 	.word	0x01067380
 8004030:	011a499f 	.word	0x011a499f
 8004034:	01312cff 	.word	0x01312cff
 8004038:	014ca43f 	.word	0x014ca43f
 800403c:	016e3600 	.word	0x016e3600
 8004040:	01a6ab1f 	.word	0x01a6ab1f
 8004044:	01e84800 	.word	0x01e84800

08004048 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d106      	bne.n	80040b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e00b      	b.n	80040d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e001      	b.n	80040d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e003      	b.n	80040d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040d0:	2032      	movs	r0, #50	; 0x32
 80040d2:	f7fc fe39 	bl	8000d48 <HAL_Delay>

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e0:	b084      	sub	sp, #16
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	e009      	b.n	8004114 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3340      	adds	r3, #64	; 0x40
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	2200      	movs	r2, #0
 800410c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3301      	adds	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b0e      	cmp	r3, #14
 8004118:	d9f2      	bls.n	8004100 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800411a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11c      	bne.n	800415a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800412e:	f043 0302 	orr.w	r3, r3, #2
 8004132:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
 8004158:	e00b      	b.n	8004172 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004184:	4619      	mov	r1, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	461a      	mov	r2, r3
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10c      	bne.n	80041b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800419e:	2100      	movs	r1, #0
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f949 	bl	8004438 <USB_SetDevSpeed>
 80041a6:	e008      	b.n	80041ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041a8:	2101      	movs	r1, #1
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f944 	bl	8004438 <USB_SetDevSpeed>
 80041b0:	e003      	b.n	80041ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041b2:	2103      	movs	r1, #3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f93f 	bl	8004438 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041ba:	2110      	movs	r1, #16
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8f3 	bl	80043a8 <USB_FlushTxFifo>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f911 	bl	80043f4 <USB_FlushRxFifo>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	461a      	mov	r2, r3
 80041e4:	2300      	movs	r3, #0
 80041e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	461a      	mov	r2, r3
 80041f0:	2300      	movs	r3, #0
 80041f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	461a      	mov	r2, r3
 80041fc:	2300      	movs	r3, #0
 80041fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e043      	b.n	800428e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800421c:	d118      	bne.n	8004250 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	461a      	mov	r2, r3
 8004232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e013      	b.n	8004262 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	461a      	mov	r2, r3
 8004248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	e008      	b.n	8004262 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	461a      	mov	r2, r3
 800425e:	2300      	movs	r3, #0
 8004260:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426e:	461a      	mov	r2, r3
 8004270:	2300      	movs	r3, #0
 8004272:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	461a      	mov	r2, r3
 8004282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	3301      	adds	r3, #1
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d3b7      	bcc.n	8004206 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	e043      	b.n	8004324 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b2:	d118      	bne.n	80042e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c6:	461a      	mov	r2, r3
 80042c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e013      	b.n	80042f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	461a      	mov	r2, r3
 80042de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e008      	b.n	80042f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004304:	461a      	mov	r2, r3
 8004306:	2300      	movs	r3, #0
 8004308:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800431c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	3301      	adds	r3, #1
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d3b7      	bcc.n	800429c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800434c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	4b0f      	ldr	r3, [pc, #60]	; (80043a4 <USB_DevInit+0x2c4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800437e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d107      	bne.n	8004394 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043a0:	b004      	add	sp, #16
 80043a2:	4770      	bx	lr
 80043a4:	803c3800 	.word	0x803c3800

080043a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	019b      	lsls	r3, r3, #6
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <USB_FlushTxFifo+0x48>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d0f0      	beq.n	80043c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	00030d40 	.word	0x00030d40

080043f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2210      	movs	r2, #16
 8004404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <USB_FlushRxFifo+0x40>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	d0f0      	beq.n	8004406 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	00030d40 	.word	0x00030d40

08004438 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800446a:	b480      	push	{r7}
 800446c:	b087      	sub	sp, #28
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0306 	and.w	r3, r3, #6
 8004482:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
 800448e:	e00a      	b.n	80044a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d002      	beq.n	800449c <USB_GetDevSpeed+0x32>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b06      	cmp	r3, #6
 800449a:	d102      	bne.n	80044a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800449c:	2302      	movs	r3, #2
 800449e:	75fb      	strb	r3, [r7, #23]
 80044a0:	e001      	b.n	80044a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044a2:	230f      	movs	r3, #15
 80044a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d13a      	bne.n	8004546 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	2101      	movs	r1, #1
 80044e2:	fa01 f303 	lsl.w	r3, r1, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	68f9      	ldr	r1, [r7, #12]
 80044ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d155      	bne.n	80045b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	78db      	ldrb	r3, [r3, #3]
 8004522:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004524:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	059b      	lsls	r3, r3, #22
 800452a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800452c:	4313      	orrs	r3, r2
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e036      	b.n	80045b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	2101      	movs	r1, #1
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	041b      	lsls	r3, r3, #16
 800455e:	68f9      	ldr	r1, [r7, #12]
 8004560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004564:	4313      	orrs	r3, r2
 8004566:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11a      	bne.n	80045b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	78db      	ldrb	r3, [r3, #3]
 8004598:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800459a:	430b      	orrs	r3, r1
 800459c:	4313      	orrs	r3, r2
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d161      	bne.n	80046a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045f6:	d11f      	bne.n	8004638 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004616:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	68f9      	ldr	r1, [r7, #12]
 8004654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004658:	4013      	ands	r3, r2
 800465a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	b29b      	uxth	r3, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800467c:	4013      	ands	r3, r2
 800467e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	0159      	lsls	r1, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	440b      	add	r3, r1
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	4619      	mov	r1, r3
 800469c:	4b35      	ldr	r3, [pc, #212]	; (8004774 <USB_DeactivateEndpoint+0x1b0>)
 800469e:	4013      	ands	r3, r2
 80046a0:	600b      	str	r3, [r1, #0]
 80046a2:	e060      	b.n	8004766 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ba:	d11f      	bne.n	80046fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	2101      	movs	r1, #1
 800470e:	fa01 f303 	lsl.w	r3, r1, r3
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	43db      	mvns	r3, r3
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800471c:	4013      	ands	r3, r2
 800471e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	2101      	movs	r1, #1
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	43db      	mvns	r3, r3
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004740:	4013      	ands	r3, r2
 8004742:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0159      	lsls	r1, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	440b      	add	r3, r1
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	4619      	mov	r1, r3
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <USB_DeactivateEndpoint+0x1b4>)
 8004762:	4013      	ands	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	ec337800 	.word	0xec337800
 8004778:	eff37800 	.word	0xeff37800

0800477c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	; 0x28
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	785b      	ldrb	r3, [r3, #1]
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 815c 	bne.w	8004a56 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d132      	bne.n	800480c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	0151      	lsls	r1, r2, #5
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	440a      	add	r2, r1
 80047bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004804:	0cdb      	lsrs	r3, r3, #19
 8004806:	04db      	lsls	r3, r3, #19
 8004808:	6113      	str	r3, [r2, #16]
 800480a:	e074      	b.n	80048f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004826:	0cdb      	lsrs	r3, r3, #19
 8004828:	04db      	lsls	r3, r3, #19
 800482a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	440a      	add	r2, r1
 8004842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004846:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800484a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800484e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6959      	ldr	r1, [r3, #20]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	440b      	add	r3, r1
 8004868:	1e59      	subs	r1, r3, #1
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004872:	04d9      	lsls	r1, r3, #19
 8004874:	4b9d      	ldr	r3, [pc, #628]	; (8004aec <USB_EPStartXfer+0x370>)
 8004876:	400b      	ands	r3, r1
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	0148      	lsls	r0, r1, #5
 800487c:	69f9      	ldr	r1, [r7, #28]
 800487e:	4401      	add	r1, r0
 8004880:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	0148      	lsls	r0, r1, #5
 80048a2:	69f9      	ldr	r1, [r7, #28]
 80048a4:	4401      	add	r1, r0
 80048a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048aa:	4313      	orrs	r3, r2
 80048ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	78db      	ldrb	r3, [r3, #3]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d11f      	bne.n	80048f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d14b      	bne.n	8004994 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d128      	bne.n	8004972 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d110      	bne.n	8004952 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e00f      	b.n	8004972 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	0151      	lsls	r1, r2, #5
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	440a      	add	r2, r1
 8004988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e12f      	b.n	8004bf4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d015      	beq.n	80049e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8117 	beq.w	8004bf4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e2:	4313      	orrs	r3, r2
 80049e4:	634b      	str	r3, [r1, #52]	; 0x34
 80049e6:	e105      	b.n	8004bf4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d110      	bne.n	8004a1a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	0151      	lsls	r1, r2, #5
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	440a      	add	r2, r1
 8004a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	e00f      	b.n	8004a3a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	68d9      	ldr	r1, [r3, #12]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	b298      	uxth	r0, r3
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fa2b 	bl	8004eaa <USB_WritePacket>
 8004a54:	e0ce      	b.n	8004bf4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a70:	0cdb      	lsrs	r3, r3, #19
 8004a72:	04db      	lsls	r3, r3, #19
 8004a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	0151      	lsls	r1, r2, #5
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	440a      	add	r2, r1
 8004a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d126      	bne.n	8004af0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab8:	69b9      	ldr	r1, [r7, #24]
 8004aba:	0148      	lsls	r0, r1, #5
 8004abc:	69f9      	ldr	r1, [r7, #28]
 8004abe:	4401      	add	r1, r0
 8004ac0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ae6:	6113      	str	r3, [r2, #16]
 8004ae8:	e036      	b.n	8004b58 <USB_EPStartXfer+0x3dc>
 8004aea:	bf00      	nop
 8004aec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4413      	add	r3, r2
 8004afa:	1e5a      	subs	r2, r3, #1
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	8afb      	ldrh	r3, [r7, #22]
 8004b16:	04d9      	lsls	r1, r3, #19
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <USB_EPStartXfer+0x484>)
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	0148      	lsls	r0, r1, #5
 8004b20:	69f9      	ldr	r1, [r7, #28]
 8004b22:	4401      	add	r1, r0
 8004b24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	8af9      	ldrh	r1, [r7, #22]
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b48:	69b9      	ldr	r1, [r7, #24]
 8004b4a:	0148      	lsls	r0, r1, #5
 8004b4c:	69f9      	ldr	r1, [r7, #28]
 8004b4e:	4401      	add	r1, r0
 8004b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b54:	4313      	orrs	r3, r2
 8004b56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10d      	bne.n	8004b7a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68d9      	ldr	r1, [r3, #12]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	460a      	mov	r2, r1
 8004b78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	78db      	ldrb	r3, [r3, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d128      	bne.n	8004bd4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d110      	bne.n	8004bb4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00f      	b.n	8004bd4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	1ff80000 	.word	0x1ff80000

08004c04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 80cd 	bne.w	8004dc0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d132      	bne.n	8004c94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	0151      	lsls	r1, r2, #5
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	440a      	add	r2, r1
 8004c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8c:	0cdb      	lsrs	r3, r3, #19
 8004c8e:	04db      	lsls	r3, r3, #19
 8004c90:	6113      	str	r3, [r2, #16]
 8004c92:	e04e      	b.n	8004d32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cae:	0cdb      	lsrs	r3, r3, #19
 8004cb0:	04db      	lsls	r3, r3, #19
 8004cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	0151      	lsls	r1, r2, #5
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	440a      	add	r2, r1
 8004cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cd6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d22:	6939      	ldr	r1, [r7, #16]
 8004d24:	0148      	lsls	r0, r1, #5
 8004d26:	6979      	ldr	r1, [r7, #20]
 8004d28:	4401      	add	r1, r0
 8004d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d32:	79fb      	ldrb	r3, [r7, #7]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11e      	bne.n	8004d76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e092      	b.n	8004e9c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d07e      	beq.n	8004e9c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	6979      	ldr	r1, [r7, #20]
 8004db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	634b      	str	r3, [r1, #52]	; 0x34
 8004dbe:	e06d      	b.n	8004e9c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dda:	0cdb      	lsrs	r3, r3, #19
 8004ddc:	04db      	lsls	r3, r3, #19
 8004dde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e02:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4a:	6939      	ldr	r1, [r7, #16]
 8004e4c:	0148      	lsls	r0, r1, #5
 8004e4e:	6979      	ldr	r1, [r7, #20]
 8004e50:	4401      	add	r1, r0
 8004e52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e56:	4313      	orrs	r3, r2
 8004e58:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10d      	bne.n	8004e7c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	68d9      	ldr	r1, [r3, #12]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	460a      	mov	r2, r1
 8004e7a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b089      	sub	sp, #36	; 0x24
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	460b      	mov	r3, r1
 8004eba:	71fb      	strb	r3, [r7, #7]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11a      	bne.n	8004f06 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ed0:	88bb      	ldrh	r3, [r7, #4]
 8004ed2:	3303      	adds	r3, #3
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	e00f      	b.n	8004efe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	031a      	lsls	r2, r3, #12
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eea:	461a      	mov	r2, r3
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	3301      	adds	r3, #1
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3eb      	bcc.n	8004ede <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3724      	adds	r7, #36	; 0x24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	3303      	adds	r3, #3
 8004f2e:	089b      	lsrs	r3, r3, #2
 8004f30:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	e00b      	b.n	8004f50 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3304      	adds	r3, #4
 8004f48:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d3ef      	bcc.n	8004f38 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f58:	69fb      	ldr	r3, [r7, #28]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b085      	sub	sp, #20
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d12c      	bne.n	8004fdc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	db12      	blt.n	8004fba <USB_EPSetStall+0x54>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00f      	beq.n	8004fba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fb8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e02b      	b.n	8005034 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	db12      	blt.n	8005014 <USB_EPSetStall+0xae>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00f      	beq.n	8005014 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005012:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800502e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d128      	bne.n	80050b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800507c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	78db      	ldrb	r3, [r3, #3]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d003      	beq.n	800508e <USB_EPClearStall+0x4c>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	78db      	ldrb	r3, [r3, #3]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d138      	bne.n	8005100 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e027      	b.n	8005100 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	78db      	ldrb	r3, [r3, #3]
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d003      	beq.n	80050e0 <USB_EPClearStall+0x9e>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	78db      	ldrb	r3, [r3, #3]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d10f      	bne.n	8005100 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005130:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005174:	f023 0303 	bic.w	r3, r3, #3
 8005178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005188:	f023 0302 	bic.w	r3, r3, #2
 800518c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ca:	f043 0302 	orr.w	r3, r3, #2
 80051ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4013      	ands	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	0c1b      	lsrs	r3, r3, #16
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	b29b      	uxth	r3, r3
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800529a:	68bb      	ldr	r3, [r7, #8]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4013      	ands	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052f6:	68bb      	ldr	r3, [r7, #8]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f003 0301 	and.w	r3, r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	460b      	mov	r3, r1
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	333c      	adds	r3, #60	; 0x3c
 800537e:	3304      	adds	r3, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4a26      	ldr	r2, [pc, #152]	; (8005420 <USB_EP0_OutStart+0xb8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d90a      	bls.n	80053a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005398:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539c:	d101      	bne.n	80053a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e037      	b.n	8005412 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	461a      	mov	r2, r3
 80053aa:	2300      	movs	r3, #0
 80053ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d0:	f043 0318 	orr.w	r3, r3, #24
 80053d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80053e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053ea:	7afb      	ldrb	r3, [r7, #11]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10f      	bne.n	8005410 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	461a      	mov	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800540e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	4f54300a 	.word	0x4f54300a

08005424 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a13      	ldr	r2, [pc, #76]	; (8005488 <USB_CoreReset+0x64>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e01b      	b.n	800547a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	daf2      	bge.n	8005430 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f043 0201 	orr.w	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <USB_CoreReset+0x64>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e006      	b.n	800547a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d0f0      	beq.n	800545a <USB_CoreReset+0x36>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	00030d40 	.word	0x00030d40

0800548c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005498:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800549c:	f002 f978 	bl	8007790 <USBD_static_malloc>
 80054a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80054b0:	2302      	movs	r3, #2
 80054b2:	e066      	b.n	8005582 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7c1b      	ldrb	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d119      	bne.n	80054f8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c8:	2202      	movs	r2, #2
 80054ca:	2181      	movs	r1, #129	; 0x81
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 f83c 	bl	800754a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054dc:	2202      	movs	r2, #2
 80054de:	2101      	movs	r1, #1
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f002 f832 	bl	800754a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2210      	movs	r2, #16
 80054f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80054f6:	e016      	b.n	8005526 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054f8:	2340      	movs	r3, #64	; 0x40
 80054fa:	2202      	movs	r2, #2
 80054fc:	2181      	movs	r1, #129	; 0x81
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f002 f823 	bl	800754a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	2202      	movs	r2, #2
 800550e:	2101      	movs	r1, #1
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 f81a 	bl	800754a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2210      	movs	r2, #16
 8005522:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005526:	2308      	movs	r3, #8
 8005528:	2203      	movs	r2, #3
 800552a:	2182      	movs	r1, #130	; 0x82
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f002 f80c 	bl	800754a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	7c1b      	ldrb	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005566:	2101      	movs	r1, #1
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 f8dd 	bl	8007728 <USBD_LL_PrepareReceive>
 800556e:	e007      	b.n	8005580 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	2101      	movs	r1, #1
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f002 f8d4 	bl	8007728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005596:	2181      	movs	r1, #129	; 0x81
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fffc 	bl	8007596 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055a4:	2101      	movs	r1, #1
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 fff5 	bl	8007596 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055b4:	2182      	movs	r1, #130	; 0x82
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f001 ffed 	bl	8007596 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00e      	beq.n	80055f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 f8e0 	bl	80077ac <USBD_static_free>
    pdev->pClassData = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005610:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005624:	2303      	movs	r3, #3
 8005626:	e0af      	b.n	8005788 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005630:	2b00      	cmp	r3, #0
 8005632:	d03f      	beq.n	80056b4 <USBD_CDC_Setup+0xb4>
 8005634:	2b20      	cmp	r3, #32
 8005636:	f040 809f 	bne.w	8005778 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	88db      	ldrh	r3, [r3, #6]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d02e      	beq.n	80056a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b25b      	sxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	da16      	bge.n	800567a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005658:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	88d2      	ldrh	r2, [r2, #6]
 800565e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	88db      	ldrh	r3, [r3, #6]
 8005664:	2b07      	cmp	r3, #7
 8005666:	bf28      	it	cs
 8005668:	2307      	movcs	r3, #7
 800566a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	89fa      	ldrh	r2, [r7, #14]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f001 fb19 	bl	8006caa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005678:	e085      	b.n	8005786 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785a      	ldrb	r2, [r3, #1]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	88db      	ldrh	r3, [r3, #6]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005690:	6939      	ldr	r1, [r7, #16]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	461a      	mov	r2, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 fb32 	bl	8006d02 <USBD_CtlPrepareRx>
      break;
 800569e:	e072      	b.n	8005786 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	7850      	ldrb	r0, [r2, #1]
 80056ac:	2200      	movs	r2, #0
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	4798      	blx	r3
      break;
 80056b2:	e068      	b.n	8005786 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b0b      	cmp	r3, #11
 80056ba:	d852      	bhi.n	8005762 <USBD_CDC_Setup+0x162>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <USBD_CDC_Setup+0xc4>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056f5 	.word	0x080056f5
 80056c8:	08005771 	.word	0x08005771
 80056cc:	08005763 	.word	0x08005763
 80056d0:	08005763 	.word	0x08005763
 80056d4:	08005763 	.word	0x08005763
 80056d8:	08005763 	.word	0x08005763
 80056dc:	08005763 	.word	0x08005763
 80056e0:	08005763 	.word	0x08005763
 80056e4:	08005763 	.word	0x08005763
 80056e8:	08005763 	.word	0x08005763
 80056ec:	0800571f 	.word	0x0800571f
 80056f0:	08005749 	.word	0x08005749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d107      	bne.n	8005710 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005700:	f107 030a 	add.w	r3, r7, #10
 8005704:	2202      	movs	r2, #2
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 face 	bl	8006caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800570e:	e032      	b.n	8005776 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fa58 	bl	8006bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005718:	2303      	movs	r3, #3
 800571a:	75fb      	strb	r3, [r7, #23]
          break;
 800571c:	e02b      	b.n	8005776 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b03      	cmp	r3, #3
 8005728:	d107      	bne.n	800573a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800572a:	f107 030d 	add.w	r3, r7, #13
 800572e:	2201      	movs	r2, #1
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fab9 	bl	8006caa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005738:	e01d      	b.n	8005776 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fa43 	bl	8006bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	75fb      	strb	r3, [r7, #23]
          break;
 8005746:	e016      	b.n	8005776 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b03      	cmp	r3, #3
 8005752:	d00f      	beq.n	8005774 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fa36 	bl	8006bc8 <USBD_CtlError>
            ret = USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005760:	e008      	b.n	8005774 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fa2f 	bl	8006bc8 <USBD_CtlError>
          ret = USBD_FAIL;
 800576a:	2303      	movs	r3, #3
 800576c:	75fb      	strb	r3, [r7, #23]
          break;
 800576e:	e002      	b.n	8005776 <USBD_CDC_Setup+0x176>
          break;
 8005770:	bf00      	nop
 8005772:	e008      	b.n	8005786 <USBD_CDC_Setup+0x186>
          break;
 8005774:	bf00      	nop
      }
      break;
 8005776:	e006      	b.n	8005786 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fa24 	bl	8006bc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005780:	2303      	movs	r3, #3
 8005782:	75fb      	strb	r3, [r7, #23]
      break;
 8005784:	bf00      	nop
  }

  return (uint8_t)ret;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e04f      	b.n	8005852 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3318      	adds	r3, #24
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d029      	beq.n	8005824 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	3318      	adds	r3, #24
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	78f9      	ldrb	r1, [r7, #3]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	460b      	mov	r3, r1
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	1a5b      	subs	r3, r3, r1
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4403      	add	r3, r0
 80057f0:	3344      	adds	r3, #68	; 0x44
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80057f8:	fb03 f301 	mul.w	r3, r3, r1
 80057fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d110      	bne.n	8005824 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3318      	adds	r3, #24
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005816:	78f9      	ldrb	r1, [r7, #3]
 8005818:	2300      	movs	r3, #0
 800581a:	2200      	movs	r2, #0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f001 ff62 	bl	80076e6 <USBD_LL_Transmit>
 8005822:	e015      	b.n	8005850 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800586c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005878:	2303      	movs	r3, #3
 800587a:	e015      	b.n	80058a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 ff72 	bl	800776a <USBD_LL_GetRxDataSize>
 8005886:	4602      	mov	r2, r0
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058a2:	4611      	mov	r1, r2
 80058a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e01b      	b.n	8005902 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <USBD_CDC_EP0_RxReady+0x50>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058da:	2bff      	cmp	r3, #255	; 0xff
 80058dc:	d010      	beq.n	8005900 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80058ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058f4:	b292      	uxth	r2, r2
 80058f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2243      	movs	r2, #67	; 0x43
 8005918:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800591a:	4b03      	ldr	r3, [pc, #12]	; (8005928 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000094 	.word	0x20000094

0800592c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2243      	movs	r2, #67	; 0x43
 8005938:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800593a:	4b03      	ldr	r3, [pc, #12]	; (8005948 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	20000050 	.word	0x20000050

0800594c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2243      	movs	r2, #67	; 0x43
 8005958:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800595a:	4b03      	ldr	r3, [pc, #12]	; (8005968 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800595c:	4618      	mov	r0, r3
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	200000d8 	.word	0x200000d8

0800596c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	220a      	movs	r2, #10
 8005978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800597a:	4b03      	ldr	r3, [pc, #12]	; (8005988 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	2000000c 	.word	0x2000000c

0800598c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	e004      	b.n	80059aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e008      	b.n	80059e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e004      	b.n	8005a18 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e01a      	b.n	8005a7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d114      	bne.n	8005a7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a6e:	2181      	movs	r1, #129	; 0x81
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 fe38 	bl	80076e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e016      	b.n	8005ad0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7c1b      	ldrb	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fe36 	bl	8007728 <USBD_LL_PrepareReceive>
 8005abc:	e007      	b.n	8005ace <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fe2d 	bl	8007728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e01f      	b.n	8005b30 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	79fa      	ldrb	r2, [r7, #7]
 8005b22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f001 fca9 	bl	800747c <USBD_LL_Init>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e016      	b.n	8005b7e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	f107 020e 	add.w	r2, r7, #14
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
 8005b74:	4602      	mov	r2, r0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 fcc0 	bl	8007514 <USBD_LL_Start>
 8005b94:	4603      	mov	r3, r0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	78fa      	ldrb	r2, [r7, #3]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
  }

  return USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 ff90 	bl	8006b54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c42:	461a      	mov	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d01a      	beq.n	8005c8e <USBD_LL_SetupStage+0x72>
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d822      	bhi.n	8005ca2 <USBD_LL_SetupStage+0x86>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <USBD_LL_SetupStage+0x4a>
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d00a      	beq.n	8005c7a <USBD_LL_SetupStage+0x5e>
 8005c64:	e01d      	b.n	8005ca2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa62 	bl	8006138 <USBD_StdDevReq>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e020      	b.n	8005cbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fac6 	bl	8006214 <USBD_StdItfReq>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8c:	e016      	b.n	8005cbc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fb05 	bl	80062a6 <USBD_StdEPReq>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca0:	e00c      	b.n	8005cbc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f001 fc8f 	bl	80075d4 <USBD_LL_StallEP>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cba:	bf00      	nop
  }

  return ret;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cd4:	7afb      	ldrb	r3, [r7, #11]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d138      	bne.n	8005d4c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ce0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d14a      	bne.n	8005d82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d913      	bls.n	8005d20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	1ad2      	subs	r2, r2, r3
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bf28      	it	cs
 8005d12:	4613      	movcs	r3, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f001 f80f 	bl	8006d3c <USBD_CtlContinueRx>
 8005d1e:	e030      	b.n	8005d82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d10b      	bne.n	8005d44 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f001 f80a 	bl	8006d5e <USBD_CtlSendStatus>
 8005d4a:	e01a      	b.n	8005d82 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d114      	bne.n	8005d82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	7afa      	ldrb	r2, [r7, #11]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
 8005d80:	e000      	b.n	8005d84 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	460b      	mov	r3, r1
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d16b      	bne.n	8005e78 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3314      	adds	r3, #20
 8005da4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d156      	bne.n	8005e5e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d914      	bls.n	8005de6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 ff84 	bl	8006ce0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2100      	movs	r1, #0
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f001 fca2 	bl	8007728 <USBD_LL_PrepareReceive>
 8005de4:	e03b      	b.n	8005e5e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d11c      	bne.n	8005e2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d316      	bcc.n	8005e2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d20f      	bcs.n	8005e2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2100      	movs	r1, #0
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 ff65 	bl	8006ce0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2200      	movs	r2, #0
 8005e22:	2100      	movs	r1, #0
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f001 fc7f 	bl	8007728 <USBD_LL_PrepareReceive>
 8005e2a:	e018      	b.n	8005e5e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d10b      	bne.n	8005e50 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e50:	2180      	movs	r1, #128	; 0x80
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 fbbe 	bl	80075d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 ff93 	bl	8006d84 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d122      	bne.n	8005eae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fe98 	bl	8005b9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e76:	e01a      	b.n	8005eae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b03      	cmp	r3, #3
 8005e82:	d114      	bne.n	8005eae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	7afa      	ldrb	r2, [r7, #11]
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	4798      	blx	r3
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	e000      	b.n	8005eb0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e02f      	b.n	8005f4c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00f      	beq.n	8005f16 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d009      	beq.n	8005f16 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6852      	ldr	r2, [r2, #4]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	4611      	mov	r1, r2
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f16:	2340      	movs	r3, #64	; 0x40
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fb14 	bl	800754a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2240      	movs	r2, #64	; 0x40
 8005f2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f32:	2340      	movs	r3, #64	; 0x40
 8005f34:	2200      	movs	r2, #0
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fb06 	bl	800754a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d106      	bne.n	8005fc2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e012      	b.n	800600c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d10b      	bne.n	800600a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800602a:	2303      	movs	r3, #3
 800602c:	e014      	b.n	8006058 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b03      	cmp	r3, #3
 8006038:	d10d      	bne.n	8006056 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	4611      	mov	r1, r2
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006076:	2303      	movs	r3, #3
 8006078:	e014      	b.n	80060a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b03      	cmp	r3, #3
 8006084:	d10d      	bne.n	80060a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	4611      	mov	r1, r2
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6852      	ldr	r2, [r2, #4]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	4611      	mov	r1, r2
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	4798      	blx	r3
  }

  return USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	3301      	adds	r3, #1
 8006110:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006118:	8a3b      	ldrh	r3, [r7, #16]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	b21a      	sxth	r2, r3
 800611e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006122:	4313      	orrs	r3, r2
 8006124:	b21b      	sxth	r3, r3
 8006126:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006128:	89fb      	ldrh	r3, [r7, #14]
}
 800612a:	4618      	mov	r0, r3
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
	...

08006138 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d005      	beq.n	800615e <USBD_StdDevReq+0x26>
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d853      	bhi.n	80061fe <USBD_StdDevReq+0xc6>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <USBD_StdDevReq+0x3a>
 800615a:	2b20      	cmp	r3, #32
 800615c:	d14f      	bne.n	80061fe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e04a      	b.n	8006208 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b09      	cmp	r3, #9
 8006178:	d83b      	bhi.n	80061f2 <USBD_StdDevReq+0xba>
 800617a:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <USBD_StdDevReq+0x48>)
 800617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006180:	080061d5 	.word	0x080061d5
 8006184:	080061e9 	.word	0x080061e9
 8006188:	080061f3 	.word	0x080061f3
 800618c:	080061df 	.word	0x080061df
 8006190:	080061f3 	.word	0x080061f3
 8006194:	080061b3 	.word	0x080061b3
 8006198:	080061a9 	.word	0x080061a9
 800619c:	080061f3 	.word	0x080061f3
 80061a0:	080061cb 	.word	0x080061cb
 80061a4:	080061bd 	.word	0x080061bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f9de 	bl	800656c <USBD_GetDescriptor>
          break;
 80061b0:	e024      	b.n	80061fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fb43 	bl	8006840 <USBD_SetAddress>
          break;
 80061ba:	e01f      	b.n	80061fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb82 	bl	80068c8 <USBD_SetConfig>
 80061c4:	4603      	mov	r3, r0
 80061c6:	73fb      	strb	r3, [r7, #15]
          break;
 80061c8:	e018      	b.n	80061fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fc21 	bl	8006a14 <USBD_GetConfig>
          break;
 80061d2:	e013      	b.n	80061fc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fc52 	bl	8006a80 <USBD_GetStatus>
          break;
 80061dc:	e00e      	b.n	80061fc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fc81 	bl	8006ae8 <USBD_SetFeature>
          break;
 80061e6:	e009      	b.n	80061fc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fc90 	bl	8006b10 <USBD_ClrFeature>
          break;
 80061f0:	e004      	b.n	80061fc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fce7 	bl	8006bc8 <USBD_CtlError>
          break;
 80061fa:	bf00      	nop
      }
      break;
 80061fc:	e004      	b.n	8006208 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80061fe:	6839      	ldr	r1, [r7, #0]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fce1 	bl	8006bc8 <USBD_CtlError>
      break;
 8006206:	bf00      	nop
  }

  return ret;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop

08006214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800622a:	2b40      	cmp	r3, #64	; 0x40
 800622c:	d005      	beq.n	800623a <USBD_StdItfReq+0x26>
 800622e:	2b40      	cmp	r3, #64	; 0x40
 8006230:	d82f      	bhi.n	8006292 <USBD_StdItfReq+0x7e>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <USBD_StdItfReq+0x26>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d12b      	bne.n	8006292 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006240:	b2db      	uxtb	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	2b02      	cmp	r3, #2
 8006246:	d81d      	bhi.n	8006284 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	889b      	ldrh	r3, [r3, #4]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b01      	cmp	r3, #1
 8006250:	d813      	bhi.n	800627a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	4798      	blx	r3
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	88db      	ldrh	r3, [r3, #6]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d110      	bne.n	800628e <USBD_StdItfReq+0x7a>
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10d      	bne.n	800628e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fd73 	bl	8006d5e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006278:	e009      	b.n	800628e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800627a:	6839      	ldr	r1, [r7, #0]
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fca3 	bl	8006bc8 <USBD_CtlError>
          break;
 8006282:	e004      	b.n	800628e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fc9e 	bl	8006bc8 <USBD_CtlError>
          break;
 800628c:	e000      	b.n	8006290 <USBD_StdItfReq+0x7c>
          break;
 800628e:	bf00      	nop
      }
      break;
 8006290:	e004      	b.n	800629c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fc97 	bl	8006bc8 <USBD_CtlError>
      break;
 800629a:	bf00      	nop
  }

  return ret;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	889b      	ldrh	r3, [r3, #4]
 80062b8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d007      	beq.n	80062d6 <USBD_StdEPReq+0x30>
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	f200 8145 	bhi.w	8006556 <USBD_StdEPReq+0x2b0>
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00c      	beq.n	80062ea <USBD_StdEPReq+0x44>
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	f040 8140 	bne.w	8006556 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
      break;
 80062e8:	e13a      	b.n	8006560 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d007      	beq.n	8006302 <USBD_StdEPReq+0x5c>
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	f300 8129 	bgt.w	800654a <USBD_StdEPReq+0x2a4>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d07f      	beq.n	80063fc <USBD_StdEPReq+0x156>
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d03c      	beq.n	800637a <USBD_StdEPReq+0xd4>
 8006300:	e123      	b.n	800654a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d002      	beq.n	8006314 <USBD_StdEPReq+0x6e>
 800630e:	2b03      	cmp	r3, #3
 8006310:	d016      	beq.n	8006340 <USBD_StdEPReq+0x9a>
 8006312:	e02c      	b.n	800636e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <USBD_StdEPReq+0x90>
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b80      	cmp	r3, #128	; 0x80
 800631e:	d00a      	beq.n	8006336 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f955 	bl	80075d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f951 	bl	80075d4 <USBD_LL_StallEP>
 8006332:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006334:	e020      	b.n	8006378 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fc45 	bl	8006bc8 <USBD_CtlError>
              break;
 800633e:	e01b      	b.n	8006378 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	885b      	ldrh	r3, [r3, #2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10e      	bne.n	8006366 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <USBD_StdEPReq+0xc0>
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d008      	beq.n	8006366 <USBD_StdEPReq+0xc0>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	88db      	ldrh	r3, [r3, #6]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 f937 	bl	80075d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fcf9 	bl	8006d5e <USBD_CtlSendStatus>

              break;
 800636c:	e004      	b.n	8006378 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fc29 	bl	8006bc8 <USBD_CtlError>
              break;
 8006376:	bf00      	nop
          }
          break;
 8006378:	e0ec      	b.n	8006554 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d002      	beq.n	800638c <USBD_StdEPReq+0xe6>
 8006386:	2b03      	cmp	r3, #3
 8006388:	d016      	beq.n	80063b8 <USBD_StdEPReq+0x112>
 800638a:	e030      	b.n	80063ee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00d      	beq.n	80063ae <USBD_StdEPReq+0x108>
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d00a      	beq.n	80063ae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 f919 	bl	80075d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063a2:	2180      	movs	r1, #128	; 0x80
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f915 	bl	80075d4 <USBD_LL_StallEP>
 80063aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063ac:	e025      	b.n	80063fa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc09 	bl	8006bc8 <USBD_CtlError>
              break;
 80063b6:	e020      	b.n	80063fa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	885b      	ldrh	r3, [r3, #2]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11b      	bne.n	80063f8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f001 f91f 	bl	8007612 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fcc2 	bl	8006d5e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80063ec:	e004      	b.n	80063f8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fbe9 	bl	8006bc8 <USBD_CtlError>
              break;
 80063f6:	e000      	b.n	80063fa <USBD_StdEPReq+0x154>
              break;
 80063f8:	bf00      	nop
          }
          break;
 80063fa:	e0ab      	b.n	8006554 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d002      	beq.n	800640e <USBD_StdEPReq+0x168>
 8006408:	2b03      	cmp	r3, #3
 800640a:	d032      	beq.n	8006472 <USBD_StdEPReq+0x1cc>
 800640c:	e097      	b.n	800653e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <USBD_StdEPReq+0x17e>
 8006414:	7bbb      	ldrb	r3, [r7, #14]
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d004      	beq.n	8006424 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fbd3 	bl	8006bc8 <USBD_CtlError>
                break;
 8006422:	e091      	b.n	8006548 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006428:	2b00      	cmp	r3, #0
 800642a:	da0b      	bge.n	8006444 <USBD_StdEPReq+0x19e>
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006432:	4613      	mov	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	3310      	adds	r3, #16
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	3304      	adds	r3, #4
 8006442:	e00b      	b.n	800645c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	3304      	adds	r3, #4
 800645c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2202      	movs	r2, #2
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fc1d 	bl	8006caa <USBD_CtlSendData>
              break;
 8006470:	e06a      	b.n	8006548 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006476:	2b00      	cmp	r3, #0
 8006478:	da11      	bge.n	800649e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3324      	adds	r3, #36	; 0x24
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d117      	bne.n	80064c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb96 	bl	8006bc8 <USBD_CtlError>
                  break;
 800649c:	e054      	b.n	8006548 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	f003 020f 	and.w	r2, r3, #15
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fb83 	bl	8006bc8 <USBD_CtlError>
                  break;
 80064c2:	e041      	b.n	8006548 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da0b      	bge.n	80064e4 <USBD_StdEPReq+0x23e>
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	3310      	adds	r3, #16
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	e00b      	b.n	80064fc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	3304      	adds	r3, #4
 80064fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <USBD_StdEPReq+0x264>
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	2b80      	cmp	r3, #128	; 0x80
 8006508:	d103      	bne.n	8006512 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e00e      	b.n	8006530 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 f89a 	bl	8007650 <USBD_LL_IsStallEP>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e002      	b.n	8006530 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2202      	movs	r2, #2
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fbb7 	bl	8006caa <USBD_CtlSendData>
              break;
 800653c:	e004      	b.n	8006548 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb41 	bl	8006bc8 <USBD_CtlError>
              break;
 8006546:	bf00      	nop
          }
          break;
 8006548:	e004      	b.n	8006554 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800654a:	6839      	ldr	r1, [r7, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fb3b 	bl	8006bc8 <USBD_CtlError>
          break;
 8006552:	bf00      	nop
      }
      break;
 8006554:	e004      	b.n	8006560 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb35 	bl	8006bc8 <USBD_CtlError>
      break;
 800655e:	bf00      	nop
  }

  return ret;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	0a1b      	lsrs	r3, r3, #8
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	2b06      	cmp	r3, #6
 800658e:	f200 8128 	bhi.w	80067e2 <USBD_GetDescriptor+0x276>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <USBD_GetDescriptor+0x2c>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	080065b5 	.word	0x080065b5
 800659c:	080065cd 	.word	0x080065cd
 80065a0:	0800660d 	.word	0x0800660d
 80065a4:	080067e3 	.word	0x080067e3
 80065a8:	080067e3 	.word	0x080067e3
 80065ac:	08006783 	.word	0x08006783
 80065b0:	080067af 	.word	0x080067af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	7c12      	ldrb	r2, [r2, #16]
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
 80065c8:	60f8      	str	r0, [r7, #12]
      break;
 80065ca:	e112      	b.n	80067f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	7c1b      	ldrb	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10d      	bne.n	80065f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	f107 0208 	add.w	r2, r7, #8
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	2202      	movs	r2, #2
 80065ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065ee:	e100      	b.n	80067f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f107 0208 	add.w	r2, r7, #8
 80065fc:	4610      	mov	r0, r2
 80065fe:	4798      	blx	r3
 8006600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	2202      	movs	r2, #2
 8006608:	701a      	strb	r2, [r3, #0]
      break;
 800660a:	e0f2      	b.n	80067f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	885b      	ldrh	r3, [r3, #2]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b05      	cmp	r3, #5
 8006614:	f200 80ac 	bhi.w	8006770 <USBD_GetDescriptor+0x204>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <USBD_GetDescriptor+0xb4>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006639 	.word	0x08006639
 8006624:	0800666d 	.word	0x0800666d
 8006628:	080066a1 	.word	0x080066a1
 800662c:	080066d5 	.word	0x080066d5
 8006630:	08006709 	.word	0x08006709
 8006634:	0800673d 	.word	0x0800673d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	7c12      	ldrb	r2, [r2, #16]
 8006650:	f107 0108 	add.w	r1, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665a:	e091      	b.n	8006780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fab2 	bl	8006bc8 <USBD_CtlError>
            err++;
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	3301      	adds	r3, #1
 8006668:	72fb      	strb	r3, [r7, #11]
          break;
 800666a:	e089      	b.n	8006780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	7c12      	ldrb	r2, [r2, #16]
 8006684:	f107 0108 	add.w	r1, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668e:	e077      	b.n	8006780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fa98 	bl	8006bc8 <USBD_CtlError>
            err++;
 8006698:	7afb      	ldrb	r3, [r7, #11]
 800669a:	3301      	adds	r3, #1
 800669c:	72fb      	strb	r3, [r7, #11]
          break;
 800669e:	e06f      	b.n	8006780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	7c12      	ldrb	r2, [r2, #16]
 80066b8:	f107 0108 	add.w	r1, r7, #8
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
 80066c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c2:	e05d      	b.n	8006780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fa7e 	bl	8006bc8 <USBD_CtlError>
            err++;
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	3301      	adds	r3, #1
 80066d0:	72fb      	strb	r3, [r7, #11]
          break;
 80066d2:	e055      	b.n	8006780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	7c12      	ldrb	r2, [r2, #16]
 80066ec:	f107 0108 	add.w	r1, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f6:	e043      	b.n	8006780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fa64 	bl	8006bc8 <USBD_CtlError>
            err++;
 8006700:	7afb      	ldrb	r3, [r7, #11]
 8006702:	3301      	adds	r3, #1
 8006704:	72fb      	strb	r3, [r7, #11]
          break;
 8006706:	e03b      	b.n	8006780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	7c12      	ldrb	r2, [r2, #16]
 8006720:	f107 0108 	add.w	r1, r7, #8
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672a:	e029      	b.n	8006780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa4a 	bl	8006bc8 <USBD_CtlError>
            err++;
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	3301      	adds	r3, #1
 8006738:	72fb      	strb	r3, [r7, #11]
          break;
 800673a:	e021      	b.n	8006780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	7c12      	ldrb	r2, [r2, #16]
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675e:	e00f      	b.n	8006780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa30 	bl	8006bc8 <USBD_CtlError>
            err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
          break;
 800676e:	e007      	b.n	8006780 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa28 	bl	8006bc8 <USBD_CtlError>
          err++;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	3301      	adds	r3, #1
 800677c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800677e:	bf00      	nop
      }
      break;
 8006780:	e037      	b.n	80067f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7c1b      	ldrb	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	f107 0208 	add.w	r2, r7, #8
 8006796:	4610      	mov	r0, r2
 8006798:	4798      	blx	r3
 800679a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800679c:	e029      	b.n	80067f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa11 	bl	8006bc8 <USBD_CtlError>
        err++;
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	3301      	adds	r3, #1
 80067aa:	72fb      	strb	r3, [r7, #11]
      break;
 80067ac:	e021      	b.n	80067f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	7c1b      	ldrb	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10d      	bne.n	80067d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f107 0208 	add.w	r2, r7, #8
 80067c2:	4610      	mov	r0, r2
 80067c4:	4798      	blx	r3
 80067c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	2207      	movs	r2, #7
 80067ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d0:	e00f      	b.n	80067f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f9f7 	bl	8006bc8 <USBD_CtlError>
        err++;
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	3301      	adds	r3, #1
 80067de:	72fb      	strb	r3, [r7, #11]
      break;
 80067e0:	e007      	b.n	80067f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9ef 	bl	8006bc8 <USBD_CtlError>
      err++;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	3301      	adds	r3, #1
 80067ee:	72fb      	strb	r3, [r7, #11]
      break;
 80067f0:	bf00      	nop
  }

  if (err != 0U)
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11e      	bne.n	8006836 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	88db      	ldrh	r3, [r3, #6]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d016      	beq.n	800682e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006800:	893b      	ldrh	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	88da      	ldrh	r2, [r3, #6]
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	4293      	cmp	r3, r2
 800680e:	bf28      	it	cs
 8006810:	4613      	movcs	r3, r2
 8006812:	b29b      	uxth	r3, r3
 8006814:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006816:	893b      	ldrh	r3, [r7, #8]
 8006818:	461a      	mov	r2, r3
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa44 	bl	8006caa <USBD_CtlSendData>
 8006822:	e009      	b.n	8006838 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9ce 	bl	8006bc8 <USBD_CtlError>
 800682c:	e004      	b.n	8006838 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa95 	bl	8006d5e <USBD_CtlSendStatus>
 8006834:	e000      	b.n	8006838 <USBD_GetDescriptor+0x2cc>
    return;
 8006836:	bf00      	nop
  }
}
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d131      	bne.n	80068b6 <USBD_SetAddress+0x76>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	88db      	ldrh	r3, [r3, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12d      	bne.n	80068b6 <USBD_SetAddress+0x76>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	885b      	ldrh	r3, [r3, #2]
 800685e:	2b7f      	cmp	r3, #127	; 0x7f
 8006860:	d829      	bhi.n	80068b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	885b      	ldrh	r3, [r3, #2]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b03      	cmp	r3, #3
 8006878:	d104      	bne.n	8006884 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f9a3 	bl	8006bc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006882:	e01d      	b.n	80068c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7bfa      	ldrb	r2, [r7, #15]
 8006888:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 ff09 	bl	80076a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa61 	bl	8006d5e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	e009      	b.n	80068c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b4:	e004      	b.n	80068c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f985 	bl	8006bc8 <USBD_CtlError>
  }
}
 80068be:	bf00      	nop
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	885b      	ldrh	r3, [r3, #2]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	4b4c      	ldr	r3, [pc, #304]	; (8006a10 <USBD_SetConfig+0x148>)
 80068de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068e0:	4b4b      	ldr	r3, [pc, #300]	; (8006a10 <USBD_SetConfig+0x148>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d905      	bls.n	80068f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f96c 	bl	8006bc8 <USBD_CtlError>
    return USBD_FAIL;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e088      	b.n	8006a06 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d002      	beq.n	8006906 <USBD_SetConfig+0x3e>
 8006900:	2b03      	cmp	r3, #3
 8006902:	d025      	beq.n	8006950 <USBD_SetConfig+0x88>
 8006904:	e071      	b.n	80069ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006906:	4b42      	ldr	r3, [pc, #264]	; (8006a10 <USBD_SetConfig+0x148>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01c      	beq.n	8006948 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800690e:	4b40      	ldr	r3, [pc, #256]	; (8006a10 <USBD_SetConfig+0x148>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006918:	4b3d      	ldr	r3, [pc, #244]	; (8006a10 <USBD_SetConfig+0x148>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff f948 	bl	8005bb4 <USBD_SetClassConfig>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f949 	bl	8006bc8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006936:	e065      	b.n	8006a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa10 	bl	8006d5e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2203      	movs	r2, #3
 8006942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006946:	e05d      	b.n	8006a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa08 	bl	8006d5e <USBD_CtlSendStatus>
      break;
 800694e:	e059      	b.n	8006a04 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006950:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <USBD_SetConfig+0x148>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d112      	bne.n	800697e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006960:	4b2b      	ldr	r3, [pc, #172]	; (8006a10 <USBD_SetConfig+0x148>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800696a:	4b29      	ldr	r3, [pc, #164]	; (8006a10 <USBD_SetConfig+0x148>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f93b 	bl	8005bec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f9f1 	bl	8006d5e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800697c:	e042      	b.n	8006a04 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800697e:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <USBD_SetConfig+0x148>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d02a      	beq.n	80069e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff f929 	bl	8005bec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800699a:	4b1d      	ldr	r3, [pc, #116]	; (8006a10 <USBD_SetConfig+0x148>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069a4:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <USBD_SetConfig+0x148>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff f902 	bl	8005bb4 <USBD_SetClassConfig>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00f      	beq.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f903 	bl	8006bc8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff f90e 	bl	8005bec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069d8:	e014      	b.n	8006a04 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9bf 	bl	8006d5e <USBD_CtlSendStatus>
      break;
 80069e0:	e010      	b.n	8006a04 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9bb 	bl	8006d5e <USBD_CtlSendStatus>
      break;
 80069e8:	e00c      	b.n	8006a04 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8eb 	bl	8006bc8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <USBD_SetConfig+0x148>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff f8f7 	bl	8005bec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069fe:	2303      	movs	r3, #3
 8006a00:	73fb      	strb	r3, [r7, #15]
      break;
 8006a02:	bf00      	nop
  }

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	2000019c 	.word	0x2000019c

08006a14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	88db      	ldrh	r3, [r3, #6]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d004      	beq.n	8006a30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f8cd 	bl	8006bc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a2e:	e023      	b.n	8006a78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	dc02      	bgt.n	8006a42 <USBD_GetConfig+0x2e>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dc03      	bgt.n	8006a48 <USBD_GetConfig+0x34>
 8006a40:	e015      	b.n	8006a6e <USBD_GetConfig+0x5a>
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d00b      	beq.n	8006a5e <USBD_GetConfig+0x4a>
 8006a46:	e012      	b.n	8006a6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3308      	adds	r3, #8
 8006a52:	2201      	movs	r2, #1
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f927 	bl	8006caa <USBD_CtlSendData>
        break;
 8006a5c:	e00c      	b.n	8006a78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2201      	movs	r2, #1
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f91f 	bl	8006caa <USBD_CtlSendData>
        break;
 8006a6c:	e004      	b.n	8006a78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f8a9 	bl	8006bc8 <USBD_CtlError>
        break;
 8006a76:	bf00      	nop
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d81e      	bhi.n	8006ad6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	88db      	ldrh	r3, [r3, #6]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d004      	beq.n	8006aaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f890 	bl	8006bc8 <USBD_CtlError>
        break;
 8006aa8:	e01a      	b.n	8006ae0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f043 0202 	orr.w	r2, r3, #2
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	2202      	movs	r2, #2
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f8eb 	bl	8006caa <USBD_CtlSendData>
      break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f875 	bl	8006bc8 <USBD_CtlError>
      break;
 8006ade:	bf00      	nop
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	885b      	ldrh	r3, [r3, #2]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d106      	bne.n	8006b08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f92b 	bl	8006d5e <USBD_CtlSendStatus>
  }
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d80b      	bhi.n	8006b40 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	885b      	ldrh	r3, [r3, #2]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10c      	bne.n	8006b4a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f910 	bl	8006d5e <USBD_CtlSendStatus>
      }
      break;
 8006b3e:	e004      	b.n	8006b4a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f840 	bl	8006bc8 <USBD_CtlError>
      break;
 8006b48:	e000      	b.n	8006b4c <USBD_ClrFeature+0x3c>
      break;
 8006b4a:	bf00      	nop
  }
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff fabb 	bl	80060fa <SWAPBYTE>
 8006b84:	4603      	mov	r3, r0
 8006b86:	461a      	mov	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff faae 	bl	80060fa <SWAPBYTE>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff faa1 	bl	80060fa <SWAPBYTE>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	80da      	strh	r2, [r3, #6]
}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bd2:	2180      	movs	r1, #128	; 0x80
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fcfd 	bl	80075d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bda:	2100      	movs	r1, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fcf9 	bl	80075d4 <USBD_LL_StallEP>
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b086      	sub	sp, #24
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d036      	beq.n	8006c6e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c04:	6938      	ldr	r0, [r7, #16]
 8006c06:	f000 f836 	bl	8006c76 <USBD_GetLen>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	3301      	adds	r3, #1
 8006c28:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	4413      	add	r3, r2
 8006c30:	2203      	movs	r2, #3
 8006c32:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	3301      	adds	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c3a:	e013      	b.n	8006c64 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	613b      	str	r3, [r7, #16]
    idx++;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	3301      	adds	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	4413      	add	r3, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	3301      	adds	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e7      	bne.n	8006c3c <USBD_GetString+0x52>
 8006c6c:	e000      	b.n	8006c70 <USBD_GetString+0x86>
    return;
 8006c6e:	bf00      	nop
  }
}
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c86:	e005      	b.n	8006c94 <USBD_GetLen+0x1e>
  {
    len++;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f5      	bne.n	8006c88 <USBD_GetLen+0x12>
  }

  return len;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	2100      	movs	r1, #0
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 fd08 	bl	80076e6 <USBD_LL_Transmit>

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fcf7 	bl	80076e6 <USBD_LL_Transmit>

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2203      	movs	r2, #3
 8006d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fcfb 	bl	8007728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 fcea 	bl	8007728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2204      	movs	r2, #4
 8006d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fcb6 	bl	80076e6 <USBD_LL_Transmit>

  return USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d94:	2300      	movs	r3, #0
 8006d96:	2200      	movs	r2, #0
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fcc4 	bl	8007728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006db0:	2200      	movs	r2, #0
 8006db2:	4912      	ldr	r1, [pc, #72]	; (8006dfc <MX_USB_DEVICE_Init+0x50>)
 8006db4:	4812      	ldr	r0, [pc, #72]	; (8006e00 <MX_USB_DEVICE_Init+0x54>)
 8006db6:	f7fe fe8f 	bl	8005ad8 <USBD_Init>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dc0:	f7f9 fdba 	bl	8000938 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006dc4:	490f      	ldr	r1, [pc, #60]	; (8006e04 <MX_USB_DEVICE_Init+0x58>)
 8006dc6:	480e      	ldr	r0, [pc, #56]	; (8006e00 <MX_USB_DEVICE_Init+0x54>)
 8006dc8:	f7fe feb6 	bl	8005b38 <USBD_RegisterClass>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dd2:	f7f9 fdb1 	bl	8000938 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006dd6:	490c      	ldr	r1, [pc, #48]	; (8006e08 <MX_USB_DEVICE_Init+0x5c>)
 8006dd8:	4809      	ldr	r0, [pc, #36]	; (8006e00 <MX_USB_DEVICE_Init+0x54>)
 8006dda:	f7fe fdd7 	bl	800598c <USBD_CDC_RegisterInterface>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006de4:	f7f9 fda8 	bl	8000938 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006de8:	4805      	ldr	r0, [pc, #20]	; (8006e00 <MX_USB_DEVICE_Init+0x54>)
 8006dea:	f7fe fecc 	bl	8005b86 <USBD_Start>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006df4:	f7f9 fda0 	bl	8000938 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006df8:	bf00      	nop
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000130 	.word	0x20000130
 8006e00:	200004e8 	.word	0x200004e8
 8006e04:	20000018 	.word	0x20000018
 8006e08:	2000011c 	.word	0x2000011c

08006e0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e10:	2200      	movs	r2, #0
 8006e12:	4905      	ldr	r1, [pc, #20]	; (8006e28 <CDC_Init_FS+0x1c>)
 8006e14:	4805      	ldr	r0, [pc, #20]	; (8006e2c <CDC_Init_FS+0x20>)
 8006e16:	f7fe fdce 	bl	80059b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e1a:	4905      	ldr	r1, [pc, #20]	; (8006e30 <CDC_Init_FS+0x24>)
 8006e1c:	4803      	ldr	r0, [pc, #12]	; (8006e2c <CDC_Init_FS+0x20>)
 8006e1e:	f7fe fde8 	bl	80059f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000fb8 	.word	0x20000fb8
 8006e2c:	200004e8 	.word	0x200004e8
 8006e30:	200007b8 	.word	0x200007b8

08006e34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
 8006e50:	4613      	mov	r3, r2
 8006e52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	2b23      	cmp	r3, #35	; 0x23
 8006e58:	d84a      	bhi.n	8006ef0 <CDC_Control_FS+0xac>
 8006e5a:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <CDC_Control_FS+0x1c>)
 8006e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e60:	08006ef1 	.word	0x08006ef1
 8006e64:	08006ef1 	.word	0x08006ef1
 8006e68:	08006ef1 	.word	0x08006ef1
 8006e6c:	08006ef1 	.word	0x08006ef1
 8006e70:	08006ef1 	.word	0x08006ef1
 8006e74:	08006ef1 	.word	0x08006ef1
 8006e78:	08006ef1 	.word	0x08006ef1
 8006e7c:	08006ef1 	.word	0x08006ef1
 8006e80:	08006ef1 	.word	0x08006ef1
 8006e84:	08006ef1 	.word	0x08006ef1
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006ef1 	.word	0x08006ef1
 8006e90:	08006ef1 	.word	0x08006ef1
 8006e94:	08006ef1 	.word	0x08006ef1
 8006e98:	08006ef1 	.word	0x08006ef1
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	08006ef1 	.word	0x08006ef1
 8006ea8:	08006ef1 	.word	0x08006ef1
 8006eac:	08006ef1 	.word	0x08006ef1
 8006eb0:	08006ef1 	.word	0x08006ef1
 8006eb4:	08006ef1 	.word	0x08006ef1
 8006eb8:	08006ef1 	.word	0x08006ef1
 8006ebc:	08006ef1 	.word	0x08006ef1
 8006ec0:	08006ef1 	.word	0x08006ef1
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006ef1 	.word	0x08006ef1
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006ef1 	.word	0x08006ef1
 8006ee0:	08006ef1 	.word	0x08006ef1
 8006ee4:	08006ef1 	.word	0x08006ef1
 8006ee8:	08006ef1 	.word	0x08006ef1
 8006eec:	08006ef1 	.word	0x08006ef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ef0:	bf00      	nop
  }

  return (USBD_OK);
 8006ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  strncpy(str_rx,(char*)Buf,*Len);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	480a      	ldr	r0, [pc, #40]	; (8006f3c <CDC_Receive_FS+0x3c>)
 8006f14:	f000 fcac 	bl	8007870 <strncpy>
  str_rx[*Len]=0;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <CDC_Receive_FS+0x3c>)
 8006f1e:	2100      	movs	r1, #0
 8006f20:	54d1      	strb	r1, [r2, r3]

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4806      	ldr	r0, [pc, #24]	; (8006f40 <CDC_Receive_FS+0x40>)
 8006f26:	f7fe fd64 	bl	80059f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <CDC_Receive_FS+0x40>)
 8006f2c:	f7fe fdaa 	bl	8005a84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000414 	.word	0x20000414
 8006f40:	200004e8 	.word	0x200004e8

08006f44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <CDC_Transmit_FS+0x48>)
 8006f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e00b      	b.n	8006f82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f6a:	887b      	ldrh	r3, [r7, #2]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4806      	ldr	r0, [pc, #24]	; (8006f8c <CDC_Transmit_FS+0x48>)
 8006f72:	f7fe fd20 	bl	80059b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f76:	4805      	ldr	r0, [pc, #20]	; (8006f8c <CDC_Transmit_FS+0x48>)
 8006f78:	f7fe fd54 	bl	8005a24 <USBD_CDC_TransmitPacket>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200004e8 	.word	0x200004e8

08006f90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2212      	movs	r2, #18
 8006fc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fc6:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	2000014c 	.word	0x2000014c

08006fd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2204      	movs	r2, #4
 8006fe8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	20000160 	.word	0x20000160

08006ffc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d105      	bne.n	800701a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	4907      	ldr	r1, [pc, #28]	; (8007030 <USBD_FS_ProductStrDescriptor+0x34>)
 8007012:	4808      	ldr	r0, [pc, #32]	; (8007034 <USBD_FS_ProductStrDescriptor+0x38>)
 8007014:	f7ff fde9 	bl	8006bea <USBD_GetString>
 8007018:	e004      	b.n	8007024 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	4904      	ldr	r1, [pc, #16]	; (8007030 <USBD_FS_ProductStrDescriptor+0x34>)
 800701e:	4805      	ldr	r0, [pc, #20]	; (8007034 <USBD_FS_ProductStrDescriptor+0x38>)
 8007020:	f7ff fde3 	bl	8006bea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007024:	4b02      	ldr	r3, [pc, #8]	; (8007030 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200017b8 	.word	0x200017b8
 8007034:	080078b0 	.word	0x080078b0

08007038 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	4904      	ldr	r1, [pc, #16]	; (8007058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007048:	4804      	ldr	r0, [pc, #16]	; (800705c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800704a:	f7ff fdce 	bl	8006bea <USBD_GetString>
  return USBD_StrDesc;
 800704e:	4b02      	ldr	r3, [pc, #8]	; (8007058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	200017b8 	.word	0x200017b8
 800705c:	080078c8 	.word	0x080078c8

08007060 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	221a      	movs	r2, #26
 8007070:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007072:	f000 f843 	bl	80070fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007076:	4b02      	ldr	r3, [pc, #8]	; (8007080 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000164 	.word	0x20000164

08007084 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	6039      	str	r1, [r7, #0]
 800708e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	4907      	ldr	r1, [pc, #28]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800709a:	4808      	ldr	r0, [pc, #32]	; (80070bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800709c:	f7ff fda5 	bl	8006bea <USBD_GetString>
 80070a0:	e004      	b.n	80070ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4904      	ldr	r1, [pc, #16]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070a6:	4805      	ldr	r0, [pc, #20]	; (80070bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070a8:	f7ff fd9f 	bl	8006bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200017b8 	.word	0x200017b8
 80070bc:	080078dc 	.word	0x080078dc

080070c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d105      	bne.n	80070de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	4907      	ldr	r1, [pc, #28]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070d6:	4808      	ldr	r0, [pc, #32]	; (80070f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070d8:	f7ff fd87 	bl	8006bea <USBD_GetString>
 80070dc:	e004      	b.n	80070e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	4904      	ldr	r1, [pc, #16]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070e2:	4805      	ldr	r0, [pc, #20]	; (80070f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070e4:	f7ff fd81 	bl	8006bea <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200017b8 	.word	0x200017b8
 80070f8:	080078e8 	.word	0x080078e8

080070fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007102:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <Get_SerialNum+0x44>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <Get_SerialNum+0x48>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800710e:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <Get_SerialNum+0x4c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4413      	add	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007122:	2208      	movs	r2, #8
 8007124:	4909      	ldr	r1, [pc, #36]	; (800714c <Get_SerialNum+0x50>)
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f814 	bl	8007154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800712c:	2204      	movs	r2, #4
 800712e:	4908      	ldr	r1, [pc, #32]	; (8007150 <Get_SerialNum+0x54>)
 8007130:	68b8      	ldr	r0, [r7, #8]
 8007132:	f000 f80f 	bl	8007154 <IntToUnicode>
  }
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	1fff7a10 	.word	0x1fff7a10
 8007144:	1fff7a14 	.word	0x1fff7a14
 8007148:	1fff7a18 	.word	0x1fff7a18
 800714c:	20000166 	.word	0x20000166
 8007150:	20000176 	.word	0x20000176

08007154 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	4613      	mov	r3, r2
 8007160:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
 800716a:	e027      	b.n	80071bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	0f1b      	lsrs	r3, r3, #28
 8007170:	2b09      	cmp	r3, #9
 8007172:	d80b      	bhi.n	800718c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	0f1b      	lsrs	r3, r3, #28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4619      	mov	r1, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	440b      	add	r3, r1
 8007184:	3230      	adds	r2, #48	; 0x30
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	e00a      	b.n	80071a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	0f1b      	lsrs	r3, r3, #28
 8007190:	b2da      	uxtb	r2, r3
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	005b      	lsls	r3, r3, #1
 8007196:	4619      	mov	r1, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	440b      	add	r3, r1
 800719c:	3237      	adds	r2, #55	; 0x37
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	3301      	adds	r3, #1
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	3301      	adds	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
 80071bc:	7dfa      	ldrb	r2, [r7, #23]
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d3d3      	bcc.n	800716c <IntToUnicode+0x18>
  }
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
	...

080071d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071f4:	d147      	bne.n	8007286 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	4b25      	ldr	r3, [pc, #148]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	4a24      	ldr	r2, [pc, #144]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
 8007206:	4b22      	ldr	r3, [pc, #136]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007218:	2300      	movs	r3, #0
 800721a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	4619      	mov	r1, r3
 8007226:	481b      	ldr	r0, [pc, #108]	; (8007294 <HAL_PCD_MspInit+0xc0>)
 8007228:	f7f9 fec4 	bl	8000fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800722c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	2302      	movs	r3, #2
 8007234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800723a:	2300      	movs	r3, #0
 800723c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800723e:	230a      	movs	r3, #10
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007242:	f107 0314 	add.w	r3, r7, #20
 8007246:	4619      	mov	r1, r3
 8007248:	4812      	ldr	r0, [pc, #72]	; (8007294 <HAL_PCD_MspInit+0xc0>)
 800724a:	f7f9 feb3 	bl	8000fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	4a0f      	ldr	r2, [pc, #60]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 8007254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007258:	6353      	str	r3, [r2, #52]	; 0x34
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	4a0b      	ldr	r2, [pc, #44]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 8007264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007268:	6453      	str	r3, [r2, #68]	; 0x44
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <HAL_PCD_MspInit+0xbc>)
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	2043      	movs	r0, #67	; 0x43
 800727c:	f7f9 fe63 	bl	8000f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007280:	2043      	movs	r0, #67	; 0x43
 8007282:	f7f9 fe7c 	bl	8000f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007286:	bf00      	nop
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40023800 	.word	0x40023800
 8007294:	40020000 	.word	0x40020000

08007298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f7fe fcb4 	bl	8005c1c <USBD_LL_SetupStage>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	4619      	mov	r1, r3
 80072e6:	f7fe fcee 	bl	8005cc6 <USBD_LL_DataOutStage>
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007304:	78fa      	ldrb	r2, [r7, #3]
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	3348      	adds	r3, #72	; 0x48
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	4619      	mov	r1, r3
 800731a:	f7fe fd37 	bl	8005d8c <USBD_LL_DataInStage>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe fe4b 	bl	8005fd0 <USBD_LL_SOF>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800734a:	2301      	movs	r3, #1
 800734c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
 800735a:	e008      	b.n	800736e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b02      	cmp	r3, #2
 8007362:	d102      	bne.n	800736a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e001      	b.n	800736e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800736a:	f7f9 fae5 	bl	8000938 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fdeb 	bl	8005f54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007384:	4618      	mov	r0, r3
 8007386:	f7fe fd97 	bl	8005eb8 <USBD_LL_Reset>
}
 800738a:	bf00      	nop
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe fde6 	bl	8005f74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <HAL_PCD_SuspendCallback+0x48>)
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	4a03      	ldr	r2, [pc, #12]	; (80073dc <HAL_PCD_SuspendCallback+0x48>)
 80073ce:	f043 0306 	orr.w	r3, r3, #6
 80073d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	e000ed00 	.word	0xe000ed00

080073e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fdd6 	bl	8005fa0 <USBD_LL_Resume>
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800740e:	78fa      	ldrb	r2, [r7, #3]
 8007410:	4611      	mov	r1, r2
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fe24 	bl	8006060 <USBD_LL_IsoOUTIncomplete>
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fdec 	bl	8006014 <USBD_LL_IsoINIncomplete>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fe2a 	bl	80060ac <USBD_LL_DevConnected>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fe27 	bl	80060c2 <USBD_LL_DevDisconnected>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d13c      	bne.n	8007506 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800748c:	4a20      	ldr	r2, [pc, #128]	; (8007510 <USBD_LL_Init+0x94>)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <USBD_LL_Init+0x94>)
 8007498:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800749c:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <USBD_LL_Init+0x94>)
 800749e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074a4:	4b1a      	ldr	r3, [pc, #104]	; (8007510 <USBD_LL_Init+0x94>)
 80074a6:	2204      	movs	r2, #4
 80074a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074aa:	4b19      	ldr	r3, [pc, #100]	; (8007510 <USBD_LL_Init+0x94>)
 80074ac:	2202      	movs	r2, #2
 80074ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074b0:	4b17      	ldr	r3, [pc, #92]	; (8007510 <USBD_LL_Init+0x94>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074b6:	4b16      	ldr	r3, [pc, #88]	; (8007510 <USBD_LL_Init+0x94>)
 80074b8:	2202      	movs	r2, #2
 80074ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074bc:	4b14      	ldr	r3, [pc, #80]	; (8007510 <USBD_LL_Init+0x94>)
 80074be:	2200      	movs	r2, #0
 80074c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074c2:	4b13      	ldr	r3, [pc, #76]	; (8007510 <USBD_LL_Init+0x94>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <USBD_LL_Init+0x94>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80074ce:	4b10      	ldr	r3, [pc, #64]	; (8007510 <USBD_LL_Init+0x94>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074d4:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <USBD_LL_Init+0x94>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074da:	480d      	ldr	r0, [pc, #52]	; (8007510 <USBD_LL_Init+0x94>)
 80074dc:	f7fa fd04 	bl	8001ee8 <HAL_PCD_Init>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074e6:	f7f9 fa27 	bl	8000938 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074ea:	2180      	movs	r1, #128	; 0x80
 80074ec:	4808      	ldr	r0, [pc, #32]	; (8007510 <USBD_LL_Init+0x94>)
 80074ee:	f7fb fe62 	bl	80031b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074f2:	2240      	movs	r2, #64	; 0x40
 80074f4:	2100      	movs	r1, #0
 80074f6:	4806      	ldr	r0, [pc, #24]	; (8007510 <USBD_LL_Init+0x94>)
 80074f8:	f7fb fe16 	bl	8003128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074fc:	2280      	movs	r2, #128	; 0x80
 80074fe:	2101      	movs	r1, #1
 8007500:	4803      	ldr	r0, [pc, #12]	; (8007510 <USBD_LL_Init+0x94>)
 8007502:	f7fb fe11 	bl	8003128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200019b8 	.word	0x200019b8

08007514 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800752a:	4618      	mov	r0, r3
 800752c:	f7fa fdf9 	bl	8002122 <HAL_PCD_Start>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f942 	bl	80077c0 <USBD_Get_USB_Status>
 800753c:	4603      	mov	r3, r0
 800753e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007540:	7bbb      	ldrb	r3, [r7, #14]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	4608      	mov	r0, r1
 8007554:	4611      	mov	r1, r2
 8007556:	461a      	mov	r2, r3
 8007558:	4603      	mov	r3, r0
 800755a:	70fb      	strb	r3, [r7, #3]
 800755c:	460b      	mov	r3, r1
 800755e:	70bb      	strb	r3, [r7, #2]
 8007560:	4613      	mov	r3, r2
 8007562:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007572:	78bb      	ldrb	r3, [r7, #2]
 8007574:	883a      	ldrh	r2, [r7, #0]
 8007576:	78f9      	ldrb	r1, [r7, #3]
 8007578:	f7fb f9dd 	bl	8002936 <HAL_PCD_EP_Open>
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f91c 	bl	80077c0 <USBD_Get_USB_Status>
 8007588:	4603      	mov	r3, r0
 800758a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800758c:	7bbb      	ldrb	r3, [r7, #14]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fb fa26 	bl	8002a06 <HAL_PCD_EP_Close>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f8fd 	bl	80077c0 <USBD_Get_USB_Status>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075ee:	78fa      	ldrb	r2, [r7, #3]
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fb fafe 	bl	8002bf4 <HAL_PCD_EP_SetStall>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f8de 	bl	80077c0 <USBD_Get_USB_Status>
 8007604:	4603      	mov	r3, r0
 8007606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007608:	7bbb      	ldrb	r3, [r7, #14]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	4611      	mov	r1, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb fb43 	bl	8002cbc <HAL_PCD_EP_ClrStall>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f8bf 	bl	80077c0 <USBD_Get_USB_Status>
 8007642:	4603      	mov	r3, r0
 8007644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007646:	7bbb      	ldrb	r3, [r7, #14]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007662:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	da0b      	bge.n	8007684 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007672:	68f9      	ldr	r1, [r7, #12]
 8007674:	4613      	mov	r3, r2
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	333e      	adds	r3, #62	; 0x3e
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	e00b      	b.n	800769c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	4613      	mov	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800769a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fb f910 	bl	80028ec <HAL_PCD_SetAddress>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f874 	bl	80077c0 <USBD_Get_USB_Status>
 80076d8:	4603      	mov	r3, r0
 80076da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	460b      	mov	r3, r1
 80076f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007704:	7af9      	ldrb	r1, [r7, #11]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f7fb fa29 	bl	8002b60 <HAL_PCD_EP_Transmit>
 800770e:	4603      	mov	r3, r0
 8007710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f853 	bl	80077c0 <USBD_Get_USB_Status>
 800771a:	4603      	mov	r3, r0
 800771c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800771e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	460b      	mov	r3, r1
 8007736:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007746:	7af9      	ldrb	r1, [r7, #11]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	f7fb f9a5 	bl	8002a9a <HAL_PCD_EP_Receive>
 8007750:	4603      	mov	r3, r0
 8007752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f832 	bl	80077c0 <USBD_Get_USB_Status>
 800775c:	4603      	mov	r3, r0
 800775e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007760:	7dbb      	ldrb	r3, [r7, #22]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7fb f9d5 	bl	8002b30 <HAL_PCD_EP_GetRxCount>
 8007786:	4603      	mov	r3, r0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007798:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <USBD_static_malloc+0x18>)
}
 800779a:	4618      	mov	r0, r3
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	200001a0 	.word	0x200001a0

080077ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d817      	bhi.n	8007804 <USBD_Get_USB_Status+0x44>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <USBD_Get_USB_Status+0x1c>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077f3 	.word	0x080077f3
 80077e4:	080077f9 	.word	0x080077f9
 80077e8:	080077ff 	.word	0x080077ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
    break;
 80077f0:	e00b      	b.n	800780a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077f2:	2303      	movs	r3, #3
 80077f4:	73fb      	strb	r3, [r7, #15]
    break;
 80077f6:	e008      	b.n	800780a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
    break;
 80077fc:	e005      	b.n	800780a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077fe:	2303      	movs	r3, #3
 8007800:	73fb      	strb	r3, [r7, #15]
    break;
 8007802:	e002      	b.n	800780a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007804:	2303      	movs	r3, #3
 8007806:	73fb      	strb	r3, [r7, #15]
    break;
 8007808:	bf00      	nop
  }
  return usb_status;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <__libc_init_array>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	4d0d      	ldr	r5, [pc, #52]	; (8007850 <__libc_init_array+0x38>)
 800781c:	4c0d      	ldr	r4, [pc, #52]	; (8007854 <__libc_init_array+0x3c>)
 800781e:	1b64      	subs	r4, r4, r5
 8007820:	10a4      	asrs	r4, r4, #2
 8007822:	2600      	movs	r6, #0
 8007824:	42a6      	cmp	r6, r4
 8007826:	d109      	bne.n	800783c <__libc_init_array+0x24>
 8007828:	4d0b      	ldr	r5, [pc, #44]	; (8007858 <__libc_init_array+0x40>)
 800782a:	4c0c      	ldr	r4, [pc, #48]	; (800785c <__libc_init_array+0x44>)
 800782c:	f000 f834 	bl	8007898 <_init>
 8007830:	1b64      	subs	r4, r4, r5
 8007832:	10a4      	asrs	r4, r4, #2
 8007834:	2600      	movs	r6, #0
 8007836:	42a6      	cmp	r6, r4
 8007838:	d105      	bne.n	8007846 <__libc_init_array+0x2e>
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007840:	4798      	blx	r3
 8007842:	3601      	adds	r6, #1
 8007844:	e7ee      	b.n	8007824 <__libc_init_array+0xc>
 8007846:	f855 3b04 	ldr.w	r3, [r5], #4
 800784a:	4798      	blx	r3
 800784c:	3601      	adds	r6, #1
 800784e:	e7f2      	b.n	8007836 <__libc_init_array+0x1e>
 8007850:	08007918 	.word	0x08007918
 8007854:	08007918 	.word	0x08007918
 8007858:	08007918 	.word	0x08007918
 800785c:	0800791c 	.word	0x0800791c

08007860 <memset>:
 8007860:	4402      	add	r2, r0
 8007862:	4603      	mov	r3, r0
 8007864:	4293      	cmp	r3, r2
 8007866:	d100      	bne.n	800786a <memset+0xa>
 8007868:	4770      	bx	lr
 800786a:	f803 1b01 	strb.w	r1, [r3], #1
 800786e:	e7f9      	b.n	8007864 <memset+0x4>

08007870 <strncpy>:
 8007870:	b510      	push	{r4, lr}
 8007872:	3901      	subs	r1, #1
 8007874:	4603      	mov	r3, r0
 8007876:	b132      	cbz	r2, 8007886 <strncpy+0x16>
 8007878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800787c:	f803 4b01 	strb.w	r4, [r3], #1
 8007880:	3a01      	subs	r2, #1
 8007882:	2c00      	cmp	r4, #0
 8007884:	d1f7      	bne.n	8007876 <strncpy+0x6>
 8007886:	441a      	add	r2, r3
 8007888:	2100      	movs	r1, #0
 800788a:	4293      	cmp	r3, r2
 800788c:	d100      	bne.n	8007890 <strncpy+0x20>
 800788e:	bd10      	pop	{r4, pc}
 8007890:	f803 1b01 	strb.w	r1, [r3], #1
 8007894:	e7f9      	b.n	800788a <strncpy+0x1a>
	...

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
